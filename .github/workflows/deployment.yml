name: Reusable deployment workflow

on:
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      RELEASE:
        required: true
        type: string
      REGISTRY_URL:
        required: true
        type: string
      ACR_VERSION:
        required: true
        type: string
      run-id:
        required: true
        type: string
      IMAGE_REPO:
        required: true
        type: string

permissions: 
  actions: read
  contents: read

jobs:
  deploy:
    name: Deploy to ${{ inputs.target-env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-env }}
    steps:
      - run: echo "ðŸŽ‰ target env ${{ inputs.target-env }}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set default values
        id: acr
        run: |
          acr=${{ github.event.inputs.REGISTRY_URL }}
          echo "::set-output name=acr_url::${acr:-"cruksmcsnbx.azurecr.io"}"
          release=${{ github.event.inputs.RELEASE }}
          echo "::set-output name=release_version::${release:-"latest"}"
          acr_tag=${{ github.event.inputs.ACR_VERSION }}
          echo "::set-output name=acr_version::${acr_tag:-"latest"}"
          if [ ${{ inputs.target-env }} == "snbx" ];  
          then  
            echo "env is sandbox so setting to demo"
            echo "::set-output name=env::demo"
          elif [ ${{ inputs.target-env }} == "non-prod" ];
          then
            echo "env is non-prod so setting to staging"
            echo "::set-output name=env::staging"
          else
            echo "::set-output name=env::${{ inputs.target-env }}"
          fi
 
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: docker_images
          github-token: ${{secrets.GITHUB_TOKEN}}
          run-id: ${{ inputs.run-id }}

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          login-server: ${{ steps.acr.outputs.acr_url}}
      
      - name: Install ACR-Tag Utility
        run: |
          bash .github/install_acr_tag.sh -v ${{ steps.acr.outputs.acr_version }} -d ./tools -t ./temp
        
      - name: Get Next Tag
        id: get_next_tag
        run: |
          next_tag=$(bash .github/get_next_tag.sh -t $tag_type -e ${{ steps.acr.outputs.env }} -r ${{ inputs.IMAGE_REPO }} -s ${{ steps.acr.outputs.acr_url}} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} -v ${{ steps.acr.outputs.release_version}})
          echo "$next_tag"
          echo "::set-output name=docker_tag::$next_tag"
        env:
          tag_type: ${{ vars.TAG_TYPE }}
      
      - name: Load and Push Docker Images
        run: |
          bash .github/load_push_images.sh -i ${{ inputs.IMAGE_REPO }} -e ${{ steps.acr.outputs.env }} -t ${{ steps.get_next_tag.outputs.docker_tag }}        
