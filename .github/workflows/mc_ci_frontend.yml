# name: mc_ci_frontend
# on:
#   pull_request:
#     branches: ["dev", "quality-assurance", "main"]
#     paths:
#       - "packages/frontend/**"
#       - ".github/workflows/mc_ci_frontend.yml"
#   push:
#     branches:
#       - "**"
#     paths:
#       - "packages/frontend/**"
#       - ".github/workflows/mc_ci_frontend.yml"
#   workflow_dispatch:
#     inputs:
#       REGISTRY_URL:
#         description: "Docker Registry URL"
#         required: true
#         default: cruksmcsnbx.azurecr.io
#         type: choice
#         options:
#           - cruksmcsnbx.azurecr.io

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

# permissions:
#   contents: read

# jobs:
#   build:
#     runs-on: ubuntu-22.04
#     defaults:
#       run:
#         working-directory: packages/frontend
#     strategy:
#       fail-fast: false
#       matrix:
#         node-version: [20.x]
#     name: Install ${{ matrix.node-version }}
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: setup node ${{ inputs.node-version }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ inputs.node-version }}

#       - name: Cache all node_modules
#         id: cache-modules
#         uses: actions/cache@v4
#         with:
#           path: "**/node_modules"
#           key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

#       - name: Find location of global yarn cache
#         shell: bash
#         id: yarn-cache
#         if: steps.cache-modules.outputs.cache-hit != 'true'
#         run: echo "::set-output name=dir::$(yarn cache dir)"

#       - name: Cache global yarn cache
#         uses: actions/cache@v4
#         if: steps.cache-modules.outputs.cache-hit != 'true'
#         with:
#           path: ${{ steps.yarn-cache.outputs.dir }}
#           key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-yarn

#       - name: Yarn Install
#         shell: bash
#         if: steps.cache-modules.outputs.cache-hit != 'true'
#         run: |
#           yarn install

#       - name: Lint
#         run: yarn lint

#       - name: Run tests with coverage
#         run: |
#           yarn test --coverage
#         env:
#           FE_KEYCLOAK_URL: http://test_keycloak:8080/
#           FE_KEYCLOAK_REALM: test-realm
#           FE_KEYCLOAK_BACKEND_CLIENT_ID: test-backend-client
#           FE_KEYCLOAK_BACKEND_CLIENT_SECRET: ABC123xyz456DEF789
#           NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8081
#           NEXT_PUBLIC_APP_REALM: test-realm
#           NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: test-frontend-client
#           NEXT_PUBLIC_API_BASE_URL: http://localhost:3000/api
#           NEXT_PUBLIC_AGENT_BINARY_API_URL: http://localhost:8000/agentbinary/v1.0
#           NEXT_PUBLIC_BASE_URL: http://localhost:3000
#           NEXT_PUBLIC_CONSOLE_API_URL: http://127.0.0.1:8001/api/v1
#           FE_SMTP_HOST: smtp-relay.test.com
#           FE_SMTP_PORT: 587
#           FE_SMTP_SSL: false
#           FE_SMTP_USER: testuser@smtp-test.com
#           FE_SMTP_PASSWORD: randomPassword123
#           FE_SMTP_FROM: testsender@testdomain.com
#           FE_ADMIN_EMAIL: testadmin@testdomain.com

#       - name: Build
#         run: |
#           yarn build
#         env:
#           NEXT_PUBLIC_KEYCLOAK_URL: "%NEXT_PUBLIC_KEYCLOAK_URL%"
#           NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: "%NEXT_PUBLIC_KEYCLOAK_CLIENT_ID%"
#           NEXT_PUBLIC_BASE_URL: "%NEXT_PUBLIC_BASE_URL%"
#           NEXT_PUBLIC_API_BASE_URL: "%NEXT_PUBLIC_API_BASE_URL%"
#           NEXT_PUBLIC_APP_REALM: "%NEXT_PUBLIC_APP_REALM%"
#           NEXT_PUBLIC_AGENT_BINARY_API_URL: "%NEXT_PUBLIC_AGENT_BINARY_API_URL%"
#           NEXT_PUBLIC_CONSOLE_API_URL: "%NEXT_PUBLIC_CONSOLE_API_URL%"

#       - name: SonarQube Scan
#         uses: SonarSource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#         with:
#           projectBaseDir: packages/frontend
#           args: >
#             -Dsonar.projectKey=frontend
#             -Dsonar.sources=src
#             -Dsonar.tests=tests
#             -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
#             -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
#       # - uses: sonarsource/sonarqube-quality-gate-action@master
#       #   timeout-minutes: 5
#       #   env:
#       #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   docker-build:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: packages/frontend
#     needs: build

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set default value
#         id: acr
#         run: |
#           acr=${{ github.event.inputs.REGISTRY_URL }}
#           echo "::set-output name=acr_url::${acr:-"cruksmcsnbx.azurecr.io"}"

#       - name: build and save docker images
#         run: |
#           chmod +x create_env_file.sh
#           ./create_env_file.sh
#           cat .env
#           tag="$(date +%Y%m%d%H%M%S)"
#           repo="mc-frontend"
#           docker build -t ${{ steps.acr.outputs.acr_url}}/$repo:$tag -f Dockerfile.frontend .
#           fend="$(docker image ls --format {{.Repository}}:{{.Tag}} | grep $repo)"
#           docker save $fend -o frontend_${{ github.sha }}.tar
#           gzip -v frontend_${{ github.sha }}.tar
#           mkdir -p /tmp/_images
#           cp *.tar.gz /tmp/_images
#         env:
#           NEXT_PUBLIC_KEYCLOAK_URL: "%NEXT_PUBLIC_KEYCLOAK_URL%"
#           NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: "%NEXT_PUBLIC_KEYCLOAK_CLIENT_ID%"
#           NEXT_PUBLIC_BASE_URL: "%NEXT_PUBLIC_BASE_URL%"
#           NEXT_PUBLIC_API_BASE_URL: "%NEXT_PUBLIC_API_BASE_URL%"
#           NEXT_PUBLIC_APP_REALM: "%NEXT_PUBLIC_APP_REALM%"
#           NEXT_PUBLIC_AGENT_BINARY_API_URL: "%NEXT_PUBLIC_AGENT_BINARY_API_URL%"
#           NEXT_PUBLIC_CONSOLE_API_URL: "%NEXT_PUBLIC_CONSOLE_API_URL%"

#       - uses: ./.github/trivy
#         with:
#           trivy-version: "latest"
#           image: "frontend"
#           ignore-errors: "true"

#       - uses: actions/upload-artifact@v4
#         name: Upload docker images
#         with:
#           name: docker_images
#           path: /tmp/_images
