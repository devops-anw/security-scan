{
	"info": {
		"_postman_id": "d80cb968-ded6-4d51-b2aa-dfecff1f513c",
		"name": "Memcrypt_qa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "38607775-d80cb968-ded6-4d51-b2aa-dfecff1f513c"
	},
	"item": [
		{
			"name": "Admin Flow",
			"item": [
				{
					"name": "Create Users",
					"item": [
						{
							"name": "Create User with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68b881b0-0dd5-402e-9b95-21cc5a76eff1",
										"exec": [
											"// Check that the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"user_username\", responseadminusername);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "caebdc5b-12d5-425f-b22c-2aee754ca3e0",
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"function generateProfessionalSuffix(length) {",
											"    const suffixes = ['Tech', 'Soft', 'Corp', 'Dyn', 'Sys'];",
											"    return suffixes[Math.floor(Math.random() * suffixes.length)] +",
											"           generateRandomString(length - suffixes[0].length);",
											"}",
											"// Function to generate a random first name",
											"function generateRandomFirstName() {",
											"    const names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve'];",
											"    return names[Math.floor(Math.random() * names.length)];",
											"}",
											"",
											"",
											"// Function to generate a random company name",
											"function generateRandomCompanyName() {",
											"    const companies = ['abc', 'def', 'xyz'];",
											"    return companies[Math.floor(Math.random() * companies.length)];",
											"}",
											"",
											"// Function to generate a GUID",
											"function generateGuid() {",
											"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"        const r = (Math.random() * 16) | 0,",
											"            v = c === 'x' ? r : (r & 0x3) | 0x8;",
											"        return v.toString(16);",
											"    });",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"let customOrgName = \"api-\" + generateProfessionalSuffix(6);;",
											"console.log(customOrgName);",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"// Set the generated customOrgName into the Postman environment",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"",
											"pm.environment.set(\"randomFirstName\", generateRandomFirstName());",
											"",
											"pm.environment.set(\"randomLastName\", generateRandomFirstName());",
											"// Generate a custom email in a valid format, ensuring itâ€™s <= 75 characters",
											"let customEmail = \"api-\"+pm.environment.get(\"randomFirstName\").toLowerCase() + ",
											"                  \".\" + ",
											"                  generateRandomString(5).toLowerCase() + ",
											"                  \"@\" + ",
											"                  generateRandomCompanyName() + ",
											"                  \".com\";",
											"",
											"// Ensure email length does not exceed 75 characters",
											"if (customEmail.length > 75) {",
											"    customEmail = customEmail.substring(0, 75);",
											"}",
											"",
											"// Generate custom username, limited to 75 characters",
											"let customUsername =customEmail;",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console for verification",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "51666374-b113-4baa-b9a7-f37168c15132",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'Invalid email'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid email\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e7ae2c2d-b93c-4b56-8edd-aa2fa6612da6"
									}
								}
							],
							"id": "d6876761-6ed5-476e-9091-49fe8c73a421",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{$randomCompanyName}}\",\n    \"adminUser\": {\n        \"username\": \"{{$randomUserName}}\",\n        \"email\": \"{{invalidEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Missing Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'invalid_type'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"invalid_type\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "cd42daac-d34a-4009-a411-1daa86c17a1f"
									}
								}
							],
							"id": "c81fef07-8e13-44e1-ac4e-5113610561f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{$randomCompanyName}}\",\n    \"adminUser\": {\n        \"email\": \"{{$randomEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Already Existing Orgname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "902f86f3-a894-4505-b098-d53ca79d92e2",
										"exec": [
											"pm.test(\"Body matches string 'Error in organization or user creation'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Error in organization or user creation\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e99c3949-112e-49c9-b66c-38990b737533",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "30402cc0-66f0-4dc9-ba8b-3ccfd405e48d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Already Existing UserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e58573a-c0d9-4232-ae8a-3ec42d02fb9a",
										"exec": [
											"pm.test(\"Body matches string 'Error in organization or user creation'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Error in organization or user creation\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36281451-635e-4da0-be17-23f0620c3888",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e176abfe-5b30-4dc2-915b-c3122e8605b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{orgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{Existingusername}}\",\n        \"email\": \"{{Existingemail}}\",\n        \"firstName\": \"{{ExistingfirstName}}\",\n        \"lastName\": \"{{ExistinglastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid email'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid email\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "2ea30c35-6cf7-45e7-af42-a44d5c80a688"
									}
								}
							],
							"id": "485d5563-c9c4-4ecc-b008-2650c27468fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{$randomCompanyName}}\",\n    \"adminUser\": {\n        \"username\": \"{{$randomUserName}}\",\n        \"email\": \"\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"id": "25e54a8a-16da-46c3-96a6-33c3fdce492b",
					"description": "Save Users",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "3c75566b-8f70-487d-8c00-9356d166096b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "74a2aec4-b088-45a2-84bb-c7626b5d876f"
							}
						}
					]
				},
				{
					"name": "Admin Email Verification for Signup",
					"item": [
						{
							"name": "Fetch Id from Latest  email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json();",
											"",
											"if (Array.isArray(responseData) && responseData.length > 0) {",
											"    let latestEmailResponseId = responseData[0].id;",
											"",
											"    pm.environment.set(\"latestEmailResponseId\", latestEmailResponseId);",
											"",
											"    console.log(\"First Email ID:\", latestEmailResponseId);",
											"} else {",
											"    console.log(\"No email responses found in the response data.\");",
											"    pm.environment.unset(\"latestEmailResponseId\"); ",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "956a8460-86f6-42e7-9202-f7e97815d0e3"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 1.5 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 1500);"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c9ce2cb3-2ba1-4294-ab78-220f13881e64"
									}
								}
							],
							"id": "4f4f54ff-aab2-4271-bff4-c6650b821b39",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages/new?mailboxName={{mailboxName}}&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages",
										"new"
									],
									"query": [
										{
											"key": "lastSeenMessageId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "mailboxName",
											"value": "{{mailboxName}}"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Admin Email for Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`New User Registration for ${customOrgName}`, function () {",
											"  pm.expect(pm.response.text()).to.include(`New User Registration for ${customOrgName}`);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "eea3f3e5-9ab1-4aeb-8a1c-5c9603dbcd76"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "32d4c972-e41c-4b21-8278-6e5638d7d221"
									}
								}
							],
							"id": "0cd48870-7172-4de2-af12-d8381ac30255",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages/{{latestEmailResponseId}}",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages",
										"{{latestEmailResponseId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "866275e0-0bc4-4da4-b136-4321a6ae0579",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "f325f94b-3a99-469a-b874-8a3807d6a80b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "d5f42d7e-e70c-435d-8c1a-5bcce2358e8a"
							}
						}
					]
				},
				{
					"name": "Fetch pending users",
					"item": [
						{
							"name": "Fetch all users pending for approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const adminUserId = pm.environment.get(\"AdminUserId\");",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(adminUserId);",
											"});",
											"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "509de87b-db5f-4c9e-94eb-903bd8597b96"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "eb434d43-29bb-43b1-8993-211a72ff9916"
									}
								}
							],
							"id": "949551fa-86db-4dc0-aa69-85771feabf46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/pending",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"pending"
									]
								}
							},
							"response": []
						}
					],
					"id": "a7fb329a-8669-4a60-8654-425f17218c46",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "57d44f2d-ab5b-41e8-881d-2f45970b3c4a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "b862857d-3d48-4bd2-880e-5b276a072987"
							}
						}
					]
				},
				{
					"name": "Approve Users",
					"item": [
						{
							"name": "Approve Created User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string 'User approved successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "76c36496-df94-491f-91dc-2c58375f98e5"
									}
								}
							],
							"id": "3cd3476a-b48b-4dcb-af1f-cbd777341e5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approving a already approved user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'User is not pending approval'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User is not pending approval\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "277acf97-ab63-4907-be58-dd8e183a2232"
									}
								}
							],
							"id": "e323f248-3da4-4f57-862e-d9d444d1a427",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approving a invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'Failed to fetch user'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Failed to fetch user\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "80ba5e12-1dd5-4ca3-9f28-13cdf5e87f4b"
									}
								}
							],
							"id": "2cefae40-656c-4f0d-8f16-8dd1086523dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{InvalidAdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{InvalidAdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approving with empty User Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Failed to fetch user'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Failed to fetch user\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "b5c5023b-a50e-4cdf-baf8-80bfad9bcd14"
									}
								}
							],
							"id": "8c43c7d9-de4d-4986-868d-03aeb6fd0d5b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rejecting already approved user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'User is not pending approval'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User is not pending approval\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "3fba6308-90f4-4a66-b1b3-9c098e4f4652"
									}
								}
							],
							"id": "73553dea-854e-456f-a684-f174fc5dc4e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/reject",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"reject"
									]
								}
							},
							"response": []
						}
					],
					"id": "1c68defa-e9cc-4285-b08e-b114b0f4ab8b",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "0d436ebc-1c31-4822-b269-25c14341af49"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "aac97c56-aa74-400f-81a0-028e5e3afd34"
							}
						}
					]
				},
				{
					"name": "User Email Verification After Approval",
					"item": [
						{
							"name": "Verify User Email After Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b90c44-e33a-41b1-baad-b6031e357e15",
										"exec": [
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "975f5e37-59fc-4ee5-8784-c229a9d1eab7",
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 3 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 2500);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "78942a6c-db7e-4d2e-8431-a792612df95c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages?searchTerms={{Existingemail}}&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages"
									],
									"query": [
										{
											"key": "searchTerms",
											"value": "{{Existingemail}}"
										},
										{
											"key": "mailboxName",
											"value": "Default"
										},
										{
											"key": "sortColumn",
											"value": "receivedDate",
											"disabled": true
										},
										{
											"key": "sortIsDescending",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "4e750d5b-197a-4065-9299-8182ed50c4db",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "e9c65afe-8516-4400-80a1-4b8bc361e4ce"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "c7d81d30-c61f-4176-9689-d7555c204136"
							}
						}
					]
				},
				{
					"name": "Fetch All Users",
					"item": [
						{
							"name": "Fetch all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const adminUserId = pm.environment.get(\"AdminUserId\");",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(adminUserId);",
											"});",
											"",
											"pm.test(\"Body matches string 'approved'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"approved\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "2f35c430-0ed1-4884-894b-d72cde76196b"
									}
								}
							],
							"id": "ccce2ef4-e3b7-46d5-8274-ee3f326e9895",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"id": "9f018704-f3b3-4dea-a8f9-465e54af568b",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "6a5a2cc3-fccb-4147-a270-9b808f5f9a5a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "bc6432dd-711c-4339-a7d4-c8f7c4c06340"
							}
						}
					]
				},
				{
					"name": "Verify email",
					"item": [
						{
							"name": "Verifying users email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string 'Email verified successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Email verified successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a39c04c1-2a38-4834-8da9-a1947355aa97"
									}
								}
							],
							"id": "759ea6a3-7cad-417f-987c-4463aa41b4b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{Existingverificationcode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/verify-email",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"verify-email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying users email with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6d6702e-daaf-4fdb-889b-f883a34910b9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'Invalid or expired verification token'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid or expired verification token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8bf16542-28fc-46d7-8cf1-acd2e403bbb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{Invalidverificationcode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/verify-email",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"verify-email"
									]
								}
							},
							"response": []
						}
					],
					"id": "cb91f486-1997-45ea-a4ed-4e4487a2779e",
					"description": "Save Users",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "7992b71f-6e0d-46cf-b33a-1cedbe30d17a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "5b45bb11-5e88-42c6-a43d-84f04956dc41"
							}
						}
					]
				},
				{
					"name": "Delete User and Organization after approval",
					"item": [
						{
							"name": "Delete User After Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "3f6c6723-8b4b-4a5d-b28c-46d3a8119227"
									}
								}
							],
							"id": "3975a56a-ed72-4d80-a64a-782196eac859",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "617130c3-fc93-4407-8583-a45a05f15f77"
									}
								}
							],
							"id": "2a12f00e-72a0-4b21-be99-0e8fb5642e36",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "22a18cc7-b579-4f92-b8db-9fa952f46e9d",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								],
								"id": "8a5a1632-caf9-4dfc-9ea9-a96fbcbe499f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "b9626ef2-3513-4dd4-9cda-33ee3271f4cc"
							}
						}
					]
				},
				{
					"name": "Reject users",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af7c0a6f-cc30-4ef7-8093-aa78be8f44d0",
										"exec": [
											"// Check that the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											"",
											"pm.environment.set(\"user_refresh_token\", \"test\");",
											"pm.environment.set(\"user_token_expiration\",0);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a5fded8-423c-400b-aed6-c7151281255a",
										"exec": [
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"function generateProfessionalSuffix(length) {",
											"    const suffixes = ['Tech', 'Soft', 'Corp', 'Dyn', 'Sys'];",
											"    return suffixes[Math.floor(Math.random() * suffixes.length)] +",
											"           generateRandomString(length - suffixes[0].length);",
											"}",
											"",
											"function generateRandomFirstName() {",
											"    const names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve'];",
											"    return names[Math.floor(Math.random() * names.length)];",
											"}",
											"",
											"function generateRandomCompanyName() {",
											"    const companies = ['techcorp', 'innosoft', 'globaldyn', 'cybersol', 'nextgen'];",
											"    return companies[Math.floor(Math.random() * companies.length)];",
											"}",
											"",
											"function generateGuid() {",
											"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"        const r = (Math.random() * 16) | 0,",
											"            v = c === 'x' ? r : (r & 0x3) | 0x8;",
											"        return v.toString(16);",
											"    });",
											"}",
											"",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, '');",
											"}",
											"",
											"let customOrgName = \"api-\" + generateProfessionalSuffix(6);;",
											"",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"",
											"pm.environment.set(\"randomFirstName\", generateRandomFirstName());",
											"",
											"pm.environment.set(\"randomLastName\", generateRandomFirstName());",
											"let customEmail = \"api-\"+pm.environment.get(\"randomFirstName\").toLowerCase() + ",
											"                  \".\" + ",
											"                  generateRandomString(5).toLowerCase() + ",
											"                  \"@\" + ",
											"                  generateRandomCompanyName() + ",
											"                  \".com\";",
											"",
											"if (customEmail.length > 75) {",
											"    customEmail = customEmail.substring(0, 75);",
											"}",
											"",
											"let customUsername =customEmail;",
											"",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aeef029d-6cfd-4120-9685-79e110ece766",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject Created Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string 'User rejected successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User rejected successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "2c21d482-43a1-4a3d-947a-21520b210842"
									}
								}
							],
							"id": "0c3c915c-fa09-4a08-958e-f07b245cce7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/reject",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"reject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rejecting a already rejected user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'User is not pending approval'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User is not pending approval\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "3f41dde1-f8bd-4cca-a99a-3c3b052cecd3"
									}
								}
							],
							"id": "2af52c4c-b36b-455e-9796-a30046af501d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/reject",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"reject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rejecting a invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'Failed to fetch user'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Failed to fetch user\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "28196970-ff80-4341-8dec-1dca26534ed9"
									}
								}
							],
							"id": "a53069d5-69dc-49a0-8f10-2d419ae650da",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{InvalidAdminUserId}}/reject",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{InvalidAdminUserId}}",
										"reject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rejecting with no user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'Failed to fetch user'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Failed to fetch user\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "2996093b-9c3c-492f-bb80-6c20d7fe3010"
									}
								}
							],
							"id": "28f0f73f-a817-4b8e-9062-61513ee3cd48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/reject",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"reject"
									]
								}
							},
							"response": []
						}
					],
					"id": "8d8abf40-b363-4f11-ae4d-ea4959555c16",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "e751b109-fc3a-4b85-8ec5-ede4d5d51e03"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "ec918b67-5ac2-4dd4-9689-31661615fcf5"
							}
						}
					]
				},
				{
					"name": "User Email Verification After Rejection",
					"item": [
						{
							"name": "Verify User Email after Rejection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Your Account Application Status`, function () {",
											"  pm.expect(pm.response.text()).to.include(`Your account application status`);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "b93f0f54-2e93-4cfc-b4ec-7aa851b88b39"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 1.5 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 1500);"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "b7e88ea0-d4cb-48fc-9da4-7318de553f71"
									}
								}
							],
							"id": "1e366b68-11a0-4b6f-9848-b214ad2900c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages?searchTerms={{Existingemail}}&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages"
									],
									"query": [
										{
											"key": "searchTerms",
											"value": "{{Existingemail}}"
										},
										{
											"key": "mailboxName",
											"value": "Default"
										},
										{
											"key": "sortColumn",
											"value": "receivedDate",
											"disabled": true
										},
										{
											"key": "sortIsDescending",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "4e77f9a7-72d8-485f-b0d5-a56fccb5f34a",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "a13a4c89-2188-493c-a220-ea2385c3a86b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "39c46f00-9b2f-4931-956d-c0b390992473"
							}
						}
					]
				},
				{
					"name": "Delete User and Organization after Rejection",
					"item": [
						{
							"name": "Delete User After Rejection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "a4e30975-80c2-4323-9665-346cb920ac1b"
									}
								}
							],
							"id": "633222e3-2446-4b7c-b1ec-ffce4c5a47be",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Rejection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "00b76c73-8967-4838-b709-aedc107d9a30"
									}
								}
							],
							"id": "456b392b-396e-426e-9a45-b77864bc18a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "3020f5f1-2e0d-4705-a549-b23601baa92c",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								],
								"id": "3c238280-d934-4c00-9f7b-298c804e9cee"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "ffd25c6f-1eb4-4856-b205-1cf66c45ad14"
							}
						}
					]
				},
				{
					"name": "Agent Binary",
					"item": [
						{
							"name": "Upload File",
							"item": [
								{
									"name": "File  Upload with valid  .zip  extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.environment.set(\"zipfile\",filename)\r",
													"pm.test(\"Response filename contains only .zip extension\", function() {\r",
													"    pm.expect(filename).to.match(/\\.zip$/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "aae7a8a4-757b-4805-adf6-ccd7465ec1b6"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"const fileName = \"4mb.zip\";\r",
													"\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d90dd126-a3dc-42b2-8021-3b1b7383a8a8"
											}
										}
									],
									"id": "aa84a9c8-aff2-434b-a78b-5a6c673ec802",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File  Upload with valid  .tar extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.environment.set(\"tarfile\",filename)\r",
													"\r",
													"pm.test(\"Response filename contains only .tar extension\", function() {\r",
													"    pm.expect(filename).to.match(/\\.tar$/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "6a334f1f-4312-48be-90ca-f3a3c11ded86"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"sample-1.tar\";\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "9cecc63e-ffcc-4a80-9fa9-471969946b23"
											}
										}
									],
									"id": "1939360d-f04c-47c0-bcf9-f9a1a85e3387",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File Upload  with valid  .exe extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.environment.set(\"exefile\",filename);\r",
													"\r",
													"pm.test(\"Response filename contains only .exe extension\", function() {\r",
													"    pm.expect(filename).to.match(/\\.exe$/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "503db203-2ea4-44d6-a63e-6108b1c30344"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"jq-win64.exe\";\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e5e92312-d2f1-4944-b767-71f19a3f9383"
											}
										}
									],
									"id": "e223eec0-e5d7-48ae-b6b6-2a16dfb4842e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File  Upload with  invalid file_.pdf extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'Invalid file extension'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Invalid file type application/pdf\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "abba44e3-2ae1-47c5-a6ed-d0528debf182"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"const fileName = \"dummy-pdf.pdf\";\r",
													"\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  \r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a1ad1da0-9768-4773-83a9-4af8eeb5beb3"
											}
										}
									],
									"id": "2f832cd5-af49-4f61-acaa-9c500412cba9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File  Upload  with more than file size",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "590dab89-fb1c-4f1a-9275-3e540f93c23d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"sample-5.tar\";\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "bb2fedb1-84d2-4f6a-ace8-fae8fda745a7"
											}
										}
									],
									"id": "5d2d2493-0ac8-4551-a491-034271fed512",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File Upload with No Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22906558-d3b6-464d-846d-1322c9a49f2e",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Body contains 'Missing boundary in multipart.'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Missing boundary in multipart\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e6761663-6e08-45d9-9dd2-deaba457e481",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Multiple files uploads",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0c18564-e67a-472f-bd2f-c0a6901daab3",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches Multiple files cannot be uploaded\",function (){\r",
													"  pm.expect(pm.response.text()).to.include(\"Multiple file upload is not allowed. Please upload only one file at a time.\");\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8f9ec1c-1941-40ce-bf03-3a616d492bd8",
												"exec": [
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"4mb.zip\";\r",
													"const fileName2 = \"sample-1.tar\";\r",
													"\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"const filePath2 = `${folderPath}/${fileName2}`;\r",
													"console.log(\"File path:\", filePath2);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"          {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath2,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d618375d-7c86-42d2-8391-47ae061e843e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								}
							],
							"id": "d4784750-8511-4cc7-831c-a6848e2dedb5",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "a9e46361-9f8b-4ccf-941f-aa2ad0205907"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "dba45793-f7b6-49e4-87a3-154ca2afeb23"
									}
								}
							]
						},
						{
							"name": "Fetch Agentbinaries",
							"item": [
								{
									"name": "Fetch All Agentbinaries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"let fileNames= [];\r",
													"for (let version in jsonData.versions) {\r",
													"    if (jsonData.versions.hasOwnProperty(version)) {\r",
													"        // Loop through each file in the version\r",
													"        jsonData.versions[version].forEach(file => {\r",
													"            // Push the filename into the array\r",
													"            fileNames.push(file.filename);\r",
													"        });\r",
													"    }\r",
													"}\r",
													"pm.environment.set(\"fileNames\", JSON.stringify(fileNames));\r",
													"\r",
													"console.log(fileNames);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "29bd4316-342b-4f36-b0f7-5d5adc16f770"
											}
										}
									],
									"id": "d68ec73b-7f48-44dc-96c7-c26f3039ba12",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										},
										"description": "List all available agent binary versions and their files."
									},
									"response": []
								}
							],
							"id": "ebae9b83-491c-4599-b8d6-5e3fc1d6b566",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "db2da5aa-85c8-44e0-9038-2c304219f604"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "09d823bb-3c5b-4345-8a31-3ae15e381bc1"
									}
								}
							]
						},
						{
							"name": "Download File",
							"item": [
								{
									"name": "Downloading a .zip File",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "c12fe996-3085-482c-8698-2a2827281c7f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "9fc8fe47-45cb-4735-a002-28bb8a0040e2"
											}
										}
									],
									"id": "8988623a-f2c5-423a-b60a-211f8901f1cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{zipfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a .tar file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8d8ad628-fc68-4b6e-b540-39ae0ec679d1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "44320955-8237-4dd4-8464-67dde679c8a4"
											}
										}
									],
									"id": "085873b9-0e02-444e-9138-b1636fe1da7c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{tarfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{tarfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a .exe file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "fb9a8a6d-7a26-46f3-9e63-b3fa2bc0c906"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f636b925-674b-4ee9-bdd3-9859481ae032"
											}
										}
									],
									"id": "de8071b8-56ff-4d8f-b1c5-0e64903c7f96",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{exefile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{exefile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a file that doesn't exist.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a6d3205b-60f5-423f-8d6c-c16b630a77cb",
												"exec": [
													"pm.environment.set(\"FileName\", \"dwsample2-zip.zip\");\r",
													"\r",
													" "
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ef42cd2-d10c-4e4b-b5b6-a111b4763560",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ce5bd6ca-b2cf-43f7-8b5b-b57b91ff11c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "/C:/Users/Vijaya/Downloads/dwsample2-zip.zip"
												}
											]
										},
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{FileName}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{FileName}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a file with no parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "99873c11-2efc-4e3a-8447-be1e2d74ff5c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "6b67ccd5-0b28-4130-b810-8bb58d2cb82b"
											}
										}
									],
									"id": "a00f4952-c96e-45b5-aaf9-b9cd267ad325",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												""
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								}
							],
							"id": "88f288ae-c3d0-451c-b587-5949f79cd635"
						},
						{
							"name": "Delete Files",
							"item": [
								{
									"name": "Deleting a .zip file.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204 No content\", function () {\r",
													"  pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "dfa34e04-4573-4a1c-8151-bc0576a72b1b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "2d708910-1553-46a4-b400-927965a07f1d"
											}
										}
									],
									"id": "747b95e2-ca4a-4fe8-aac9-4b17c1129fed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"{{zipfile}}"
											]
										},
										"description": "Delete the specified agent binary file. Only accessible by admin users."
									},
									"response": []
								},
								{
									"name": "Downloading a file that has been deleted.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "9e649354-d2e8-4d7b-8d1a-9d48c0b1e050"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "6b943fca-40eb-42cb-af4b-be5210b1ef97"
											}
										}
									],
									"id": "39068c9f-4a98-4c4b-a5f8-6e9c52967fdc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{zipfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Deleting a file that has already been deleted.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "25883d62-c7e9-4e30-add4-a42d0a7e3ae8"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404 \", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Body matches string 'File not Found'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"File not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e4d50706-6866-4966-a280-e5ba01593345"
											}
										}
									],
									"id": "c93238f8-474c-43c6-862b-04a9b37206c0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"{{zipfile}}"
											]
										},
										"description": "Delete the specified agent binary file. Only accessible by admin users."
									},
									"response": []
								},
								{
									"name": "Deleting a file that doesn't exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"    pm.environment.set(\"FileName\", \"dwsample2-zip\");\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "dcde19d9-ff5d-4965-8586-74d7df9c8c5e"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404 \", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Body matches string 'File not Found'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"File not found\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "2a776023-2151-4198-9295-66e89ca9e8b8"
											}
										}
									],
									"id": "0ee18693-231c-41e0-86e0-91fcdda8e11c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/{{FileName}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"{{FileName}}"
											]
										},
										"description": "Delete the specified agent binary file. Only accessible by admin users."
									},
									"response": []
								},
								{
									"name": "Deleting a file with no parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "5aeed3d5-2fdd-4ad1-bb8e-4b1cf421320d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Fixed syntax \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"  pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Body matches string 'Method not Allowed'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "403bff45-5e53-4f2d-a1a0-244d5b81c7a4"
											}
										}
									],
									"id": "ed326d2c-6000-4db5-9629-07cbe7fa118b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										},
										"description": "Delete the specified agent binary file. Only accessible by admin users."
									},
									"response": []
								}
							],
							"id": "3165ad1f-17d6-4e6f-9047-d8381ae850c5",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "e0f816d7-753e-4e8b-b8cb-c7cb6f2d5aaa"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "f4af73ed-b2f7-4461-beab-7cb5bdfe7b18"
									}
								}
							]
						}
					],
					"id": "afbf3ad1-a36c-4e62-a210-89710ed6f7f5",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "8bf759b3-2849-4de9-8439-5bb5b9859698"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "bfd293cc-90ab-4e0e-8f27-76f9e5157826"
							}
						}
					]
				}
			],
			"id": "f32a9947-79d3-415e-9edd-accea7730719",
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{keycloak_url}}/realms/memcrypt-qa/protocol/openid-connect/token",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "{{keycloak_url}}/realms/memcrypt-qa/protocol/openid-connect/auth",
						"type": "string"
					},
					{
						"key": "scope",
						"value": "openid email profile",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{client_id}}",
						"type": "string"
					},
					{
						"key": "redirect_uri",
						"value": "https://oauth.pstmn.io/v1/callback",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Admin token",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "tokenRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code_with_pkce",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Store the base URL from the environment variable",
							"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
							"let clientid = pm.environment.get(\"client_id\");",
							"",
							"// Set the base URL, realm, client ID, and client secret",
							" // Replace {keycloak_url} with your Keycloak URL",
							"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
							"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
							"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
							"",
							"// Set the token endpoint",
							"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
							"",
							"// Get the current time and the token expiration time from environment variables",
							"let currentTime = Math.floor(Date.now() / 1000);",
							"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
							"",
							"// Check if the token has expired or is about to expire",
							"if (currentTime >= tokenExpiration - 60) {",
							"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
							"",
							"    // Attempt to refresh the token",
							"    pm.sendRequest({",
							"        url: tokenEndpoint,",
							"        method: \"POST\",",
							"        header: {",
							"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"        },",
							"        body: {",
							"            mode: \"urlencoded\",",
							"            urlencoded: [",
							"                { key: \"client_id\", value: clientid },",
							"                { key: \"grant_type\", value: \"refresh_token\" },",
							"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
							"            ]",
							"        }",
							"    }, function (err, res) {",
							"        if (err) {",
							"            console.log(\"Token refresh failed for admin:\", err);",
							"        } else {",
							"            try {",
							"                let jsonData = res.json();",
							"",
							"                // Check if there is an invalid grant error",
							"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
							"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
							"               ",
							"                    // Handle the invalid grant error by re-authenticating",
							"                    pm.sendRequest({",
							"                        url: tokenEndpoint,",
							"                        method: \"POST\",",
							"                        header: {",
							"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"                        },",
							"                        body: {",
							"                            mode: \"urlencoded\",",
							"                            urlencoded: [",
							"                                { key: \"client_id\", value: clientid },",
							"                                { key: \"grant_type\", value: \"password\" },",
							"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
							"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
							"                                { key: \"scope\", value: \"openid\" }",
							"                            ]",
							"                        }",
							"                    }, function (authErr, authRes) {",
							"                        if (authErr) {",
							"                            console.log(\"Re-authentication failed for admin:\", authErr);",
							"                        } else {",
							"                            let authData = authRes.json();",
							"",
							"                            // Update the access token, refresh token, and expiration time",
							"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
							"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
							"",
							"                            // Calculate and store the new token expiration time",
							"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
							"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
							"",
							"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
							"                        }",
							"                    });",
							"                } else {",
							"                    // Update the access token, refresh token, and expiration time",
							"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
							"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
							"",
							"                    // Calculate and store the new token expiration time",
							"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
							"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
							"",
							"                    console.log(\"Admin Token refreshed successfully.\");",
							"                }",
							"            } catch (e) {",
							"                console.log(\"Error parsing response for admin:\", e);",
							"            }",
							"        }",
							"    });",
							"} else {",
							"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
							"}",
							"",
							"//keycloak",
							"",
							"",
							"",
							"",
							""
						],
						"id": "374c073b-f615-4d2e-bb48-17fcf1fef3a6"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						],
						"id": "898c2b70-a08c-411a-b911-c59f1c71b054"
					}
				}
			]
		},
		{
			"name": "User Flow",
			"item": [
				{
					"name": "Create Users",
					"item": [
						{
							"name": "Create User with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdca6f56-ab18-4721-81f4-e458b5a82453",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"user_username\", responseadminusername);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											"",
											"pm.environment.set(\"user_refresh_token\", \"test\");",
											"pm.environment.set(\"user_token_expiration\",0);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "851cdfe5-efc5-43d4-a95e-7aa316eb128e",
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"function generateProfessionalSuffix(length) {",
											"    const suffixes = ['Tech', 'Soft', 'Corp', 'Dyn', 'Sys'];",
											"    return suffixes[Math.floor(Math.random() * suffixes.length)] +",
											"           generateRandomString(length - suffixes[0].length);",
											"}",
											"// Function to generate a random first name",
											"function generateRandomFirstName() {",
											"    const names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve'];",
											"    return names[Math.floor(Math.random() * names.length)];",
											"}",
											"",
											"",
											"function generateRandomCompanyName() {",
											"    const companies = ['abc', 'def', 'xyz'];",
											"    return companies[Math.floor(Math.random() * companies.length)];",
											"}",
											"",
											"// Function to generate a GUID",
											"function generateGuid() {",
											"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"        const r = (Math.random() * 16) | 0,",
											"            v = c === 'x' ? r : (r & 0x3) | 0x8;",
											"        return v.toString(16);",
											"    });",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"let customOrgName = \"api-\" + generateProfessionalSuffix(6);;",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"// Set the generated customOrgName into the Postman environment",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"",
											"pm.environment.set(\"randomFirstName\", generateRandomFirstName());",
											"",
											"pm.environment.set(\"randomLastName\", generateRandomFirstName());",
											"// Generate a custom email in a valid format, ensuring itâ€™s <= 75 characters",
											"let customEmail = \"api-\"+pm.environment.get(\"randomFirstName\").toLowerCase() + ",
											"                  \".\" + ",
											"                  generateRandomString(5).toLowerCase() + ",
											"                  \"@\" + ",
											"                  generateRandomCompanyName() + ",
											"                  \".com\";",
											"",
											"// Ensure email length does not exceed 75 characters",
											"if (customEmail.length > 75) {",
											"    customEmail = customEmail.substring(0, 75);",
											"}",
											"",
											"// Generate custom username, limited to 75 characters",
											"let customUsername =customEmail;",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console for verification",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "69420ac5-f5d0-4cb3-822c-27327b28990b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'Invalid email'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid email\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "7324adf7-3fb0-48fe-8163-09851865f407"
									}
								}
							],
							"id": "fae3e30b-fb46-4055-b0aa-1b6f83d18230",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{$randomCompanyName}}\",\n    \"adminUser\": {\n        \"username\": \"{{$randomUserName}}\",\n        \"email\": \"{{invalidEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Missing Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string 'invalid_type'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"invalid_type\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "8765cf8d-106e-45b2-8210-7766536ba63e"
									}
								}
							],
							"id": "6bc78d5e-c9c7-4ffe-a95f-d4c028f3f629",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{$randomCompanyName}}\",\n    \"adminUser\": {\n        \"email\": \"{{$randomEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Already Existing Orgname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8043b732-a7c3-4b18-aa5a-cdfd44ce105d",
										"exec": [
											"pm.test(\"Body matches string 'Error in organization or user creation'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Error in organization or user creation\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f25a1f5e-f205-432e-8c04-e6c59470cb97",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9481c5de-44e5-4b5b-bc85-d1222b83ab7f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with Already Existing UserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bf54b0c-2652-450f-b881-740e5f2991b5",
										"exec": [
											"pm.test(\"Body matches string 'Error in organization or user creation'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Error in organization or user creation\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2606a37d-862d-4ef7-a846-4fcb06f0d70a",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5752c4bd-4ce2-4cc9-9cca-82aac3ea741e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{orgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{Existingusername}}\",\n        \"email\": \"{{Existingemail}}\",\n        \"firstName\": \"{{ExistingfirstName}}\",\n        \"lastName\": \"{{ExistinglastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User with empty data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid email'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid email\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "f7f18f8b-8bb4-434d-a38e-37ad5abba9e6"
									}
								}
							],
							"id": "82b9f4b1-d4e0-4648-8171-017c031fd4bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{$randomCompanyName}}\",\n    \"adminUser\": {\n        \"username\": \"{{$randomUserName}}\",\n        \"email\": \"\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"id": "3f76be1d-3fae-4d6c-ad7e-ac8902f15d81",
					"description": "Save Users",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "bc464e73-161e-4b0d-ba56-98360e98c899"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "a5b22d6f-4430-4751-906f-8176127da7ff"
							}
						}
					]
				},
				{
					"name": "User Email Verification for Signup",
					"item": [
						{
							"name": "Verify User Email for Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3c9a678-0947-46a7-ada9-e8d559b131fb",
										"exec": [
											"// Fetch customOrgName from environment",
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb98fe9d-c1d3-49bc-b31e-f03f51770181",
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 3 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 1500);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8dd104f4-6c83-4c1c-96b4-a3149a8913dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages?searchTerms={{Existingemail}}&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages"
									],
									"query": [
										{
											"key": "searchTerms",
											"value": "{{Existingemail}}"
										},
										{
											"key": "mailboxName",
											"value": "Default"
										},
										{
											"key": "sortColumn",
											"value": "receivedDate",
											"disabled": true
										},
										{
											"key": "sortIsDescending",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "6b8f355a-5934-42c0-9aab-d0da548a84e6",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "91315c26-6e82-4f9e-a3d2-7e2666bfd4d9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "6500fb1c-543e-4f3e-b229-0b2fed2e903a"
							}
						}
					]
				},
				{
					"name": "Approve user in User Flow",
					"item": [
						{
							"name": "Approve Created User in User Flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'User approved successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "d2c56be3-ecb4-4e29-9f8d-0bab8e1934ee"
									}
								}
							],
							"id": "4f4c9462-67f9-43a5-95be-d0e39fef5331",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						}
					],
					"id": "ffb5285a-80cd-4b0c-b727-97a3f4f44532",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Get the current time and the token expiration time from environment variables",
									"let currentTime = Math.floor(Date.now() / 1000);",
									"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
									"",
									"// Check if the token has expired or is about to expire",
									"if (currentTime >= tokenExpiration - 60) {",
									"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
									"",
									"    // Attempt to refresh the token",
									"    pm.sendRequest({",
									"        url: tokenEndpoint,",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"        },",
									"        body: {",
									"            mode: \"urlencoded\",",
									"            urlencoded: [",
									"                { key: \"client_id\", value: clientid },",
									"                { key: \"grant_type\", value: \"refresh_token\" },",
									"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
									"            ]",
									"        }",
									"    }, function (err, res) {",
									"        if (err) {",
									"            console.log(\"Token refresh failed for admin:\", err);",
									"        } else {",
									"            try {",
									"                let jsonData = res.json();",
									"",
									"                // Check if there is an invalid grant error",
									"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
									"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
									"               ",
									"                    // Handle the invalid grant error by re-authenticating",
									"                    pm.sendRequest({",
									"                        url: tokenEndpoint,",
									"                        method: \"POST\",",
									"                        header: {",
									"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"                        },",
									"                        body: {",
									"                            mode: \"urlencoded\",",
									"                            urlencoded: [",
									"                                { key: \"client_id\", value: clientid },",
									"                                { key: \"grant_type\", value: \"password\" },",
									"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
									"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
									"                                { key: \"scope\", value: \"openid\" }",
									"                            ]",
									"                        }",
									"                    }, function (authErr, authRes) {",
									"                        if (authErr) {",
									"                            console.log(\"Re-authentication failed for admin:\", authErr);",
									"                        } else {",
									"                            let authData = authRes.json();",
									"",
									"                            // Update the access token, refresh token, and expiration time",
									"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
									"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
									"",
									"                            // Calculate and store the new token expiration time",
									"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
									"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
									"",
									"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
									"                        }",
									"                    });",
									"                } else {",
									"                    // Update the access token, refresh token, and expiration time",
									"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
									"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
									"",
									"                    // Calculate and store the new token expiration time",
									"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
									"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
									"",
									"                    console.log(\"Admin Token refreshed successfully.\");",
									"                }",
									"            } catch (e) {",
									"                console.log(\"Error parsing response for admin:\", e);",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
									"}",
									"",
									"//keycloak",
									"",
									"",
									"",
									"",
									""
								],
								"id": "96a3a039-80bd-4c94-a44f-dfb097c7ba79"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "9e200c4b-65f1-4c1d-9747-3a769db01469"
							}
						}
					]
				},
				{
					"name": "Fetch Pending users RBA check",
					"item": [
						{
							"name": "Fetch all users pending for approval RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fbe6ebf-9d88-4771-93a0-d32d10bc0d08",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c3c48ee0-f8c6-41c5-8383-487bd88f8117",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/pending",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"pending"
									]
								}
							},
							"response": []
						}
					],
					"id": "3d047728-6376-4ab1-b77f-2e47198798e1",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "f0f0797a-5db8-4210-aaf4-f5b369e5a375"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "f83e526f-b195-4cf8-bb9a-143729ffb02f"
							}
						}
					]
				},
				{
					"name": "Approve Users RBA check",
					"item": [
						{
							"name": "Approve Created User RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "88e7a3f4-1170-4b83-a116-6372b7349650"
									}
								}
							],
							"id": "33f9b8df-545d-4a3a-8b65-287ae9579009",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approving a already approved user RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "0d6a46c2-2d33-4aa8-b763-907aabf88a5d"
									}
								}
							],
							"id": "3bdaea52-4421-487c-80b5-09a4f1d15726",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approving a invalid user RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "7d32b6d9-1382-4c93-a837-8fa4ef2f0804"
									}
								}
							],
							"id": "fd29d5cd-511b-4fd5-b5b8-be3c03c38eac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{InvalidAdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{InvalidAdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						}
					],
					"id": "35a72bee-9efe-4734-b9e1-b19f552ee45e",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "4d7f3b02-77ab-4134-ad10-4ed0308fba13"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "e2db88e8-e8a9-4eeb-be2d-0bedd7e3e041"
							}
						}
					]
				},
				{
					"name": "Delete User and Organization created for approval RBC",
					"item": [
						{
							"name": "Delete User After Approval in user flow rbc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "96dbfb1c-601c-4acd-a0fd-652de2d5314d"
									}
								}
							],
							"id": "85b12da7-b050-4063-b8d9-128e37a9219d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Approval in user flow for rbc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "9b617b66-dab6-4c19-bb05-792b36ef5a91"
									}
								}
							],
							"id": "a6e556ab-46aa-4429-91e8-7a7921443550",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "bc363506-acf8-460e-8686-4ca572eb9043",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								],
								"id": "0460748b-5065-4363-93fe-b2bba92ac8e5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "08aa8c47-4d4e-4ba0-af54-735e12ef204c"
							}
						}
					]
				},
				{
					"name": "Fetch All Users RBA check",
					"item": [
						{
							"name": "Fetch all users RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "947fc4e5-41e8-4fe5-9a9f-75e5c92c4744",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "87f3762c-9f9e-4cfd-a124-ec39e5dd36a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"id": "8305ccb3-3f6f-4c71-b34f-92904f31dc64",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "984aff22-28df-44b8-aaf9-9b76d52c92da"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "a854ccc5-5f15-49b3-a678-49d7486e074d"
							}
						}
					]
				},
				{
					"name": "Reject users RBA check",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea40705c-cb1f-4c64-8ce7-88621b8ee891",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"user_username\", responseadminusername);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											"",
											"pm.environment.set(\"user_refresh_token\", \"test\");",
											"pm.environment.set(\"user_token_expiration\",0);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7afa201-3228-4b8e-ba29-63208fc36a7e",
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"function generateProfessionalSuffix(length) {",
											"    const suffixes = ['Tech', 'Soft', 'Corp', 'Dyn', 'Sys'];",
											"    return suffixes[Math.floor(Math.random() * suffixes.length)] +",
											"           generateRandomString(length - suffixes[0].length);",
											"}",
											"// Function to generate a random first name",
											"function generateRandomFirstName() {",
											"    const names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve'];",
											"    return names[Math.floor(Math.random() * names.length)];",
											"}",
											"",
											"",
											"function generateRandomCompanyName() {",
											"    const companies = ['abc', 'def', 'xyz'];",
											"    return companies[Math.floor(Math.random() * companies.length)];",
											"}",
											"",
											"// Function to generate a GUID",
											"function generateGuid() {",
											"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"        const r = (Math.random() * 16) | 0,",
											"            v = c === 'x' ? r : (r & 0x3) | 0x8;",
											"        return v.toString(16);",
											"    });",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"let customOrgName = \"api-\" + generateProfessionalSuffix(6);;",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"// Set the generated customOrgName into the Postman environment",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"",
											"pm.environment.set(\"randomFirstName\", generateRandomFirstName());",
											"",
											"pm.environment.set(\"randomLastName\", generateRandomFirstName());",
											"// Generate a custom email in a valid format, ensuring itâ€™s <= 75 characters",
											"let customEmail = \"api-\"+pm.environment.get(\"randomFirstName\").toLowerCase() + ",
											"                  \".\" + ",
											"                  generateRandomString(5).toLowerCase() + ",
											"                  \"@\" + ",
											"                  generateRandomCompanyName() + ",
											"                  \".com\";",
											"",
											"// Ensure email length does not exceed 75 characters",
											"if (customEmail.length > 75) {",
											"    customEmail = customEmail.substring(0, 75);",
											"}",
											"",
											"// Generate custom username, limited to 75 characters",
											"let customUsername =customEmail;",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console for verification",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3d713811-9cdb-4da9-a71b-8683711e467a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rejecting a invalid user RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Invalid token'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "0040d748-e4fc-4525-8dec-94ad533d23ab"
									}
								}
							],
							"id": "e288f0cd-368d-4327-b926-cc9cb081ff1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{InvalidAdminUserId}}/reject",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{InvalidAdminUserId}}",
										"reject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Created User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'User approved successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "d2c56be3-ecb4-4e29-9f8d-0bab8e1934ee"
									}
								}
							],
							"id": "71357689-8239-43b0-b9d9-e2935fdda17c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						}
					],
					"id": "f5b73b12-ba50-45b2-b8a2-7e51745ab452",
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "d48f6544-5709-4355-8a9d-15e25cb6e79c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "b8bd12b6-74a9-48a3-804d-d40b5aa4721e"
							}
						}
					]
				},
				{
					"name": "Agent Binary",
					"item": [
						{
							"name": "Upload File RBA check",
							"item": [
								{
									"name": "File upload with valid .zip extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58cfd028-9898-427a-a6ed-a17038224835",
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"  pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66b8f4df-ba86-4870-afe9-06e730c2a9cf",
												"exec": [
													"// Get the folder path from the environment variable",
													"const folderPath = pm.environment.get('fileuploadPath');",
													" ",
													"// Set the file name directly",
													"const fileName = \"4mb.zip\";",
													" ",
													"// Use backticks for template literals to combine folder path and file name",
													"const filePath = `${folderPath}/${fileName}`;",
													"console.log(\"File path:\", filePath);",
													" ",
													"// Set the request body to include the file",
													"pm.request.body = {",
													"    mode: 'formdata',",
													"    formdata: [",
													"        {",
													"            key: 'file',",
													"            type: 'file',",
													"            src: filePath,  // Use the combined file path",
													"        },",
													"    ],",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9bc4c9f9-49fb-4415-b964-f02026fa4d3e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								}
							],
							"id": "2d471187-8658-4934-88bc-a647b7eeef0b",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "42b1ac88-a5ed-4491-9a8f-99d42171c207"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "981706d8-6285-40ef-ac1f-833b0fe1f0bd"
									}
								}
							]
						},
						{
							"name": "Fetch Agentbinaries",
							"item": [
								{
									"name": "Fetch All Agentbinaries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ce0e1c07-7599-4c9c-bf42-1c03f769883b"
											}
										}
									],
									"id": "3002f1c2-bd6e-4617-ab64-8973554195e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										},
										"description": "List all available agent binary versions and their files."
									},
									"response": []
								}
							],
							"id": "a0f75477-2f40-4d32-9514-12924f9869d2",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "3982212f-dfa8-4ca7-9bda-4229dcd9cfe4"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "35004245-5f99-49df-b733-32fcc433c237"
									}
								}
							]
						},
						{
							"name": "Download File",
							"item": [
								{
									"name": "Downloading a .tar file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "b3caa8dc-c062-47f6-a5eb-1b6556fa65ce"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "548d2b10-b33a-45aa-87f1-77c3ea540018"
											}
										}
									],
									"id": "522fd69e-49bb-41bc-be88-5711997f4607",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{tarfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{tarfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a .exe file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "375975fb-a170-4b30-bc68-b4d723343be2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "17dddcf5-58f2-4a61-941f-d3de82af8d87"
											}
										}
									],
									"id": "f9879736-36d4-49b0-8699-0548f659cb62",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{exefile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{exefile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a file that doesn't exist.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0a44d547-5fe0-4dd7-9264-8059900b9318",
												"exec": [
													"pm.environment.set(\"FileName\", \"dwsample2-zip.zip\");\r",
													"\r",
													" "
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "244e7d77-8cfc-4bf7-8235-4547ad4c573a",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a4dd2f50-994a-421e-92d1-aba9635ca81f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{FileName}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{FileName}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a file with no parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4564c79b-5f5a-4bab-bad0-b18fde7da7e4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "3e9cc7ef-1740-4612-bf4b-bba0d495a672"
											}
										}
									],
									"id": "4fd48473-f40e-4f86-8656-83713de57b89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												""
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								}
							],
							"id": "b262344f-818a-4ef8-8e48-6822051625c8"
						},
						{
							"name": "Delete File RBA check",
							"item": [
								{
									"name": "Deleting exe file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"  pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "86d3fe93-69e4-45bb-934b-184b60cdd2d6"
											}
										}
									],
									"id": "7ac499db-166d-4cb3-9d70-e98f302a4598",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/{{exefile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"{{exefile}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6a79cc4f-4867-4919-a702-4f85a37c1186",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "11ad8735-6a4b-40a0-af79-b69604347e3c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "d0fe4560-a977-4c3e-bb82-9e47f8663669"
									}
								}
							]
						}
					],
					"id": "27ac7503-87c1-46af-a035-8f2222d7cd82",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "00a71e9a-b0d4-48cc-b053-f2ed6b4024e0"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "208aa02d-0b7e-4b1e-92d7-d9f9e1b74c1b"
							}
						}
					]
				},
				{
					"name": "Delete User and Organization after Rejection",
					"item": [
						{
							"name": "Delete User After Rejection in user flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "d63e2793-17ba-4597-847a-02482dd45c18"
									}
								}
							],
							"id": "cd487006-395b-4b3b-bcbb-e00b70550c63",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Rejection in user flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "cbc0ddb1-02ae-4d66-bd46-9365a7fbb192"
									}
								}
							],
							"id": "55fa7bc7-1bda-4d48-a4ad-9afea3d511a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "95444f27-0914-4905-997a-fc82a3fce9c0",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								],
								"id": "4961a3d2-d2c9-4d99-ac57-21d7c6a4c45d"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "73b84434-4998-4254-92f5-174c56acef6c"
							}
						}
					]
				},
				{
					"name": "Console",
					"item": [
						{
							"name": "Create and Approve User",
							"item": [
								{
									"name": "Create User with valid data in console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef84a0c3-7690-4b7a-a89f-bbc076c3e82f",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string 'pending'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"pending\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var responsetenantId = jsonData.tenant.id;",
													"var responseadminuserid = jsonData.adminUser.id;",
													"var responseadminusername = jsonData.adminUser.username;",
													"var responseadminemail = jsonData.adminUser.email;",
													"var responseadminfirstname = jsonData.adminUser.firstName;",
													"var responseadminlastname = jsonData.adminUser.lastName;",
													"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
													"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
													"",
													"// Set the id and email as environment variables",
													"pm.environment.set(\"TenantId\", responsetenantId);",
													"pm.environment.set(\"AdminUserId\", responseadminuserid);",
													"pm.environment.set(\"user_username\", responseadminusername);",
													"pm.environment.set(\"Existingusername\", responseadminusername);",
													"pm.environment.set(\"Existingemail\", responseadminemail);",
													"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
													"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
													"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
													"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
													"",
													"pm.environment.set(\"user_refresh_token\", \"test\");",
													"pm.environment.set(\"user_token_expiration\",0);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b322a36a-0eab-4d90-9dc4-8f6713f7c86d",
												"exec": [
													"// Function to generate a random string of specified length",
													"function generateRandomString(length) {",
													"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"function generateProfessionalSuffix(length) {",
													"    const suffixes = ['Tech', 'Soft', 'Corp', 'Dyn', 'Sys'];",
													"    return suffixes[Math.floor(Math.random() * suffixes.length)] +",
													"           generateRandomString(length - suffixes[0].length);",
													"}",
													"// Function to generate a random first name",
													"function generateRandomFirstName() {",
													"    const names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve'];",
													"    return names[Math.floor(Math.random() * names.length)];",
													"}",
													"",
													"",
													"function generateRandomCompanyName() {",
													"    const companies = ['abc', 'def', 'xyz'];",
													"    return companies[Math.floor(Math.random() * companies.length)];",
													"}",
													"",
													"// Function to generate a GUID",
													"function generateGuid() {",
													"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
													"        const r = (Math.random() * 16) | 0,",
													"            v = c === 'x' ? r : (r & 0x3) | 0x8;",
													"        return v.toString(16);",
													"    });",
													"}",
													"",
													"// Function to remove commas and spaces from a string",
													"function sanitizeString(str) {",
													"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
													"}",
													"",
													"let customOrgName = \"api-\" + generateProfessionalSuffix(6);;",
													"",
													"// Sanitize the customOrgName to remove commas and spaces",
													"customOrgName = sanitizeString(customOrgName);",
													"",
													"if (customOrgName.length > 55) {",
													"    customOrgName = customOrgName.substring(0, 55);",
													"}",
													"",
													"// Set the generated customOrgName into the Postman environment",
													"pm.environment.set(\"customOrgName\", customOrgName);",
													"",
													"pm.environment.set(\"randomFirstName\", generateRandomFirstName());",
													"",
													"pm.environment.set(\"randomLastName\", generateRandomFirstName());",
													"// Generate a custom email in a valid format, ensuring itâ€™s <= 75 characters",
													"let customEmail = \"api-\"+pm.environment.get(\"randomFirstName\").toLowerCase() + ",
													"                  \".\" + ",
													"                  generateRandomString(5).toLowerCase() + ",
													"                  \"@\" + ",
													"                  generateRandomCompanyName() + ",
													"                  \".com\";",
													"",
													"// Ensure email length does not exceed 75 characters",
													"if (customEmail.length > 75) {",
													"    customEmail = customEmail.substring(0, 75);",
													"}",
													"",
													"// Generate custom username, limited to 75 characters",
													"let customUsername =customEmail;",
													"",
													"// Set the generated values into Postman environment variables",
													"pm.environment.set(\"customOrgName\", customOrgName);",
													"pm.environment.set(\"customUsername\", customUsername);",
													"pm.environment.set(\"customEmail\", customEmail);",
													"",
													"// Log the generated values to the console for verification",
													"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
													"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
													"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9bc61d85-e82d-4a3d-a8c8-d72e947c88f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{App_url}}/api/auth/signup",
											"host": [
												"{{App_url}}"
											],
											"path": [
												"api",
												"auth",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve Created User in console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string 'User approved successfully'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "99363793-8417-4c4e-b7dd-40dfd6630739"
											}
										}
									],
									"id": "c2ef9b1c-178e-4a4b-90ee-c724ead38d69",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
											"host": [
												"{{App_url}}"
											],
											"path": [
												"api",
												"users",
												"{{AdminUserId}}",
												"approve"
											]
										}
									},
									"response": []
								}
							],
							"id": "a4ec4f56-713c-4c46-a10b-67208a2a40d8",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Store the base URL from the environment variable",
											"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
											"let clientid = pm.environment.get(\"client_id\");",
											"",
											"// Set the base URL, realm, client ID, and client secret",
											" // Replace {keycloak_url} with your Keycloak URL",
											"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
											"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
											"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
											"",
											"// Set the token endpoint",
											"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
											"",
											"// Get the current time and the token expiration time from environment variables",
											"let currentTime = Math.floor(Date.now() / 1000);",
											"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
											"",
											"// Check if the token has expired or is about to expire",
											"if (currentTime >= tokenExpiration - 60) {",
											"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
											"",
											"    // Attempt to refresh the token",
											"    pm.sendRequest({",
											"        url: tokenEndpoint,",
											"        method: \"POST\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
											"        },",
											"        body: {",
											"            mode: \"urlencoded\",",
											"            urlencoded: [",
											"                { key: \"client_id\", value: clientid },",
											"                { key: \"grant_type\", value: \"refresh_token\" },",
											"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
											"            ]",
											"        }",
											"    }, function (err, res) {",
											"        if (err) {",
											"            console.log(\"Token refresh failed for admin:\", err);",
											"        } else {",
											"            try {",
											"                let jsonData = res.json();",
											"",
											"                // Check if there is an invalid grant error",
											"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
											"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
											"               ",
											"                    // Handle the invalid grant error by re-authenticating",
											"                    pm.sendRequest({",
											"                        url: tokenEndpoint,",
											"                        method: \"POST\",",
											"                        header: {",
											"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
											"                        },",
											"                        body: {",
											"                            mode: \"urlencoded\",",
											"                            urlencoded: [",
											"                                { key: \"client_id\", value: clientid },",
											"                                { key: \"grant_type\", value: \"password\" },",
											"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
											"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
											"                                { key: \"scope\", value: \"openid\" }",
											"                            ]",
											"                        }",
											"                    }, function (authErr, authRes) {",
											"                        if (authErr) {",
											"                            console.log(\"Re-authentication failed for admin:\", authErr);",
											"                        } else {",
											"                            let authData = authRes.json();",
											"",
											"                            // Update the access token, refresh token, and expiration time",
											"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
											"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
											"",
											"                            // Calculate and store the new token expiration time",
											"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
											"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
											"",
											"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
											"                        }",
											"                    });",
											"                } else {",
											"                    // Update the access token, refresh token, and expiration time",
											"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
											"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
											"",
											"                    // Calculate and store the new token expiration time",
											"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
											"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
											"",
											"                    console.log(\"Admin Token refreshed successfully.\");",
											"                }",
											"            } catch (e) {",
											"                console.log(\"Error parsing response for admin:\", e);",
											"            }",
											"        }",
											"    });",
											"} else {",
											"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
											"}",
											"",
											"//keycloak",
											"",
											"",
											"",
											"",
											""
										],
										"id": "16912eae-e0ff-4b9d-aa76-747bbeb0135b"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "c7035ab4-a36a-4443-ba80-f55af72a8c0d"
									}
								}
							]
						},
						{
							"name": "Add Device",
							"item": [
								{
									"name": "Create Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceSerialNumber = pm.environment.get(\"deviceSerialNumber\");",
													"",
													"var responseDeviceId = jsonData.id;",
													"",
													"// Set the id and email as environment variables",
													"pm.environment.set(\"deviceID\", responseDeviceId);",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is deviceSerialNumber\", function () {",
													"    pm.expect(jsonData).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.serial_number.toString()).to.equal(deviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ba9a42f8-ed08-43f7-be2c-3948803a67c8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1 and 999999999",
													"const serialNumber = Math.floor(1 + Math.random() * 999999999);",
													"",
													"// Log the serial number for debugging",
													"console.log(\"Generated Serial Number: \" + serialNumber);",
													"",
													"// Set the serial number as an environment variable",
													"pm.environment.set(\"deviceSerialNumber\", serialNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "2a3fb342-d77c-47c6-8fe1-2c9664b7f37f"
											}
										}
									],
									"id": "2bd63cc0-8303-4511-b3c5-6bd31e32e137",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{deviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Device with same serial Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"const deviceSerialNumber = pm.environment.get(\"deviceSerialNumber\");",
													"",
													"",
													"pm.test(\"Body matches string 'DUPLICATE_DEVICE_SERIAL'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"DUPLICATE_DEVICE_SERIAL\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "82202fe7-af1d-40f9-b7e3-d44df6451f35"
											}
										}
									],
									"id": "a4b648c1-cff3-4c4c-8b82-91662eaa459c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{deviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Device with missing property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body matches string 'serial_number is missing'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"INVALID_INPUT\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "0d7ea7ad-2e0d-4875-8dfa-4babcce680d0"
											}
										}
									],
									"id": "b8820f84-1dc5-4ffe-9f2d-7829377d8a64",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Device with invalid Authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "765f85cb-6f52-4ef1-a761-a1d083958f7c"
											}
										}
									],
									"id": "34079878-20bf-415e-be6c-bae3eed69e90",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "346546546576576"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"09876d3d\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								}
							],
							"id": "114f348d-54c8-406c-9b83-46ba1cbe76dc",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "087b0377-1319-4150-9159-55900a02e2e0"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "5941ecea-743b-4250-aba2-bb07e43daef0"
									}
								}
							]
						},
						{
							"name": "Fetch Device before heartbeat",
							"item": [
								{
									"name": "Fetch all the devices in the Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"// Parse the response as JSON",
													"const responseJson = pm.response.json();",
													"",
													"// Access the first device object from the 'devices' array",
													"const firstDevice = responseJson.devices[0];",
													"",
													"// Verify 'id' matches the stored 'deviceID'",
													"pm.test(\"Verify 'id' matches deviceID\", function () {",
													"    pm.expect(firstDevice).to.have.property(\"id\"); // Check if 'id' exists",
													"    pm.expect(firstDevice.id).to.equal(deviceID);  // Verify 'id' matches deviceID",
													"});",
													"",
													"// Verify 'last_seen' is null",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(firstDevice).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(firstDevice.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "cd95baed-ff50-4f47-babd-da364cbbb9ff"
											}
										}
									],
									"id": "512582a7-0d87-4414-9ac4-637d3d17a167",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/?skip=0&limit=100",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch all the devices in a Non-existing Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a3af4ef-68d9-4c09-b5c6-abeafb7ab0f1",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													" ",
													"pm.test(\"Error message is 'Invalid authentication credentials'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.error).to.eql(\"Invalid authentication credentials\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "337d5c27-8bff-4d5b-b175-04fc7da315e1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "1234",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "8765433589999",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/?skip=0&limit=100",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch a device in a Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"id\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d78dbdbf-47f5-4867-8daa-32de2eb440a3"
											}
										}
									],
									"id": "e4d274e6-a6e6-4cf4-9a49-2967a0838420",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "fbddbcfe-892c-4c88-96b1-a280a379c8d3",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "999c1dc2-1b07-452d-a02c-77405ce1934b"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "42537b78-7815-4f31-acc0-b70d62849f68"
									}
								}
							]
						},
						{
							"name": "Update Device",
							"item": [
								{
									"name": "Updating Device IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0d3e3a5-a5b3-4a1c-8605-17960fcdd185",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceSerialNumber = pm.environment.get(\"deviceSerialNumber\");",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is deviceSerialNumber\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.serial_number.toString()).to.equal(deviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a66acce5-a590-443c-9a4e-33436e2cd6e1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"properties\": {\n\t\"IP\" :\"{{updatedDeviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch a device in a Org after device update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const updatedDeviceIP = pm.environment.get(\"updatedDeviceIP\");",
													"",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"id\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.id.toString()).to.equal(deviceID.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"pm.test(\"Verify IP is 'updatedDeviceIP'\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.nested.property(\"properties.IP\", updatedDeviceIP); // Check IP value",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "77feff29-89d1-4f2f-b4e8-9fdcd90298ad"
											}
										}
									],
									"id": "d5ca723e-8670-4b6d-93ed-9fa694918b63",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const secondDeviceSerialNumber = pm.environment.get(\"secondDeviceSerialNumber\");",
													"",
													"// Extract the id and email from the response",
													"var responseDeviceId = jsonData.id;",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is secondDeviceSerialNumber\", function () {",
													"    pm.expect(jsonData).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.serial_number.toString()).to.equal(secondDeviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a8683102-38fd-412c-8d1b-40b8ea1caa1a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1 and 999999999",
													"const serialNumber = Math.floor(1 + Math.random() * 999999999);",
													"",
													"// Log the serial number for debugging",
													"console.log(\"Generated Serial Number: \" + serialNumber);",
													"",
													"// Set the serial number as an environment variable",
													"pm.environment.set(\"secondDeviceSerialNumber\", serialNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "660980db-0568-4cf6-9072-b8eecba53e05"
											}
										}
									],
									"id": "a4c4a941-968a-44cb-8b6e-58f27898eca3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{secondDeviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{secondDeviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Updating Device with existing device serial number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc565115-3a92-4b67-b639-317191f46c98",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400); ",
													"});",
													"",
													"",
													"pm.test(\"Body matches string 'Validation error'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9df06ae0-f801-467a-b242-ec8d00730d35",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{secondDeviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{updatedDeviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b926208e-f793-40c5-a68c-0827174fe267",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "1cae7fb6-fe97-47f0-bcad-116cb575b210"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "3930fc39-5c54-4cf1-853e-6e803ffeb391"
									}
								}
							]
						},
						{
							"name": "Update Device Heartbeat",
							"item": [
								{
									"name": "Update Heartbeat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4517978-4f16-4ce0-9890-53747c3a5ace",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Fetch 'last_seen' field\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); ",
													"    console.log(\"last_seen:\", jsonData.last_seen); ",
													"});",
													"",
													"pm.environment.set(\"last_seen\", jsonData.last_seen);",
													"",
													"const cpuUsage = jsonData.properties.cpu_usage;",
													"",
													"// Determine health status based on CPU usage",
													"let health;",
													"if (cpuUsage <= 0.7) {",
													"    health = \"HEALTHY\";",
													"} else if (cpuUsage > 0.7 && cpuUsage <= 0.9) {",
													"    health = \"AT_RISK\";",
													"} else {",
													"    health = \"CRITICAL\";",
													"}",
													"",
													"pm.test(\"Verify health status based on CPU usage\", function () {",
													"    pm.expect(jsonData.health).to.eql(health);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "95699548-77dc-4b0c-b636-50df5bda0ff4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cpu_usage\": 0.65,\r\n  \"mem_usage\": 0.5,\r\n  \"disk_usage\": 0.4\r\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/heartbeat",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"heartbeat"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Heartbeat with non exist device ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2699e400-30fd-40db-addc-0eef20ba380c",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Verify 'code' is OBJECT_NOT_FOUND\", function () {",
													"    pm.expect(responseJson).to.have.property(\"error\"); ",
													"    pm.expect(responseJson).to.have.property(\"code\"); ",
													"    pm.expect(responseJson.code).to.equal(\"OBJECT_NOT_FOUND\"); ",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7212df93-1b02-474d-9b50-e7285741bd82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"cpu_usage\": 0.65,\r\n  \"mem_usage\": 0.5,\r\n  \"disk_usage\": 0.4\r\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/909091/heartbeat",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"909091",
												"heartbeat"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Heartbeat with not deviceID parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"  pm.response.to.have.status(405);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Verify 'detail' is 'Method Not Allowed'\", function () {",
													"    pm.expect(responseJson).to.have.property(\"detail\"); ",
													"    pm.expect(responseJson.detail).to.equal(\"Method Not Allowed\"); ",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "91901bc8-e862-490c-b33b-46de781397c1"
											}
										}
									],
									"id": "099fa1a0-2c65-4f69-8f42-143bfb9dd8c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/heartbeat",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"heartbeat"
											]
										}
									},
									"response": []
								}
							],
							"id": "47b51626-a98c-471a-a9b8-0945461e3006",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "691bacf0-6f0b-417a-9b12-82cc2b3474ce"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "0c8e3bbf-14b6-45f8-994b-4cf7d7e3e455"
									}
								}
							]
						},
						{
							"name": "Fetch Device After heartbeat",
							"item": [
								{
									"name": "Fetch a device to check status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const lastseenAtEnv = pm.environment.get(\"last_seen\"); ",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'last_seen' is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\");",
													"    pm.expect(jsonData.last_seen).to.equal(lastseenAtEnv);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "9e1cc958-39bd-4d09-89ff-870020f03b85"
											}
										}
									],
									"id": "1fdde593-745d-418a-abe7-2e84792b01fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5f552c28-cb57-4e7b-9ec5-e65f16660fc3",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "3f3bda38-34b3-4e67-9c90-d42792ca98ca"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "98c7b6cc-ff45-4237-a839-efc6ee83f3bf"
									}
								}
							]
						},
						{
							"name": "Fetch Device and check status after 1 min where heartbeat call is not done",
							"item": [
								{
									"name": "Fetch a device to check status after 1 min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const lastseenAtEnv = pm.environment.get(\"last_seen\"); ",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'last_seen' is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\");",
													"    pm.expect(jsonData.last_seen).to.equal(lastseenAtEnv);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ba930a89-a9a1-45da-82ab-de3db871e924"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Adding a delay of 60 seconds before sending the request...\");",
													"",
													"// Delay of 60 seconds (60000 milliseconds)",
													"setTimeout(function() {",
													"    console.log(\"Delay finished. Proceeding to send the request.\");",
													"    // Any code you want to execute after the delay can go here",
													"}, 60000);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d4a1e24b-bf90-4784-abe1-9265759ef7e4"
											}
										}
									],
									"id": "3e11146e-a1e7-4b19-8ed1-72b0428ffcad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "403092bc-68de-47db-b94f-9df8820929b6",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "48a0050c-5e73-4695-bbe9-7b0482edc6c9"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "a3dd2647-f372-4bea-8681-78a6d528dc99"
									}
								}
							]
						}
					],
					"id": "23a5be80-ccdc-48a1-9b8b-f34b53d3ac94",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "4a51a960-98dc-4719-9d2c-d2ec392e7579"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "67a53966-9053-44b0-9596-41ee328938cc"
							}
						}
					]
				},
				{
					"name": "EndPoint-Config",
					"item": [
						{
							"name": "Fetch and update end-point config details",
							"item": [
								{
									"name": "Fetch end-point config details for a device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"Analysis\");",
													"    pm.expect(jsonData.config).to.have.property(\"Decryptor\");",
													"    pm.expect(jsonData.config).to.have.property(\"Bands\");",
													"    pm.expect(jsonData.config).to.have.property(\"MonitorStatistics\");",
													"    pm.expect(jsonData.config).to.have.property(\"Whitelist\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "1e2ef219-d449-454a-b2c4-e013e8393580"
											}
										}
									],
									"id": "ab03706d-0105-4a5f-9b36-06d42593e8b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update end-point config details for a device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"Analysis\");",
													"    pm.expect(jsonData.config).to.have.property(\"Decryptor\");",
													"    pm.expect(jsonData.config).to.have.property(\"Bands\");",
													"    pm.expect(jsonData.config).to.have.property(\"MonitorStatistics\");",
													"    pm.expect(jsonData.config).to.have.property(\"Whitelist\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4156b394-99e7-44d3-8858-c742ab0626d5"
											}
										}
									],
									"id": "001d6682-4c08-4628-b0bc-2828902b2d07",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"HP dash LP Config\",\n    \"type\": \"Laptop\",\n    \"config\": {\n        \"MemcryptLog\": {\n            \"post_ip\": \"localhost\",\n            \"port\": \"{{memcryptLog_port}}\",\n            \"local_log_location\": \"C:\\\\Windows\\\\Detect\\\\TempDEBUG=false\"\n        },\n        \"Analysis\": {\n            \"dir_to_analyse\": \"\",\n            \"key\": \"\",\n            \"nonce\": \"\",\n            \"ipaddress\": \"localhost\",\n            \"port\": \"8899\",\n            \"infected_file\": \"\",\n            \"dir_candidate_values\": \"\",\n            \"recovery_file\": \"C:\\\\Windows\\\\Detect\\\\Tempremote=true\",\n            \"parallel\": \"false\",\n            \"bulk\": \"false\"\n        },\n        \"Decryptor\": {\n            \"dir_candidate_values\": \"\",\n            \"infected_file\": \"\",\n            \"dir_candidates_folder\": \"\",\n            \"dir_ransomware_folder\": \"\",\n            \"dir_extracts_folder\": \"\",\n            \"decrypts_folder\": \"\",\n            \"recovery_file\": \"C:\\\\Windows\\\\Detect\\\\Tempsafeext_filename=C:\\\\Windows\\\\Detect\\\\SafeExt.csv\",\n            \"extensionvalidationfile\": \"C:\\\\Windows\\\\Detect\\fileidentifier.json\",\n            \"ransomwareparameterfile\": \"C:\\\\Windows\\\\Detect\\ransomware.json\",\n            \"time_limit\": \"1800\",\n            \"remote\": \"true\",\n            \"parallel\": \"auto\",\n            \"algorithms\": \"CHACHA20#256#NA,CHACHA8#256#NA,SALSA20#256#NA,AES#256#CBC,AES#256#CTR,AES#256#CFB\",\n            \"bulk\": \"false\"\n        },\n        \"Bands\": {\n            \"cpured\": \"90\",\n            \"cpuamber\": \"70\",\n            \"memred\": \"90\",\n            \"memamber\": \"70\",\n            \"diskred\": \"90\",\n            \"diskamber\": \"70\",\n            \"ioreadsred\": \"100\",\n            \"ioreadsamber\": \"20\",\n            \"iowritesred\": \"100\",\n            \"iowritesamber\": \"20\",\n            \"updatedeltared\": \"30\",\n            \"updatedeltaamber\": \"10\"\n        },\n        \"MonitorStatistics\": {\n            \"ipaddress\": \"localhost\",\n            \"port\": \"8888\",\n            \"refreshinterval\": \"10\"\n        },\n        \"Whitelist\": {\n            \"inspect_folder\": \"c:whitelist_path=C:\\\\Windows\\\\Detect\\\\hashwhitelist.csv\",\n            \"hashes_number\": \"\",\n            \"hash_size\": \"\",\n            \"buffer_size\": \"\",\n            \"remote\": \"true\",\n            \"append\": \"true\",\n            \"centralised\": \"true\",\n            \"ipaddress\": \"localhost\",\n            \"port\": \"8888\"\n        },\n        \"Extractor\": {\n            \"logswitch\": \"silent\",\n            \"security_switch\": \"off\",\n            \"extract_folder\": \"C:\\\\Windows\\\\Detect\\\\Temp\",\n            \"hash_filename\": \"C:\\\\Windows\\\\Detect\\\\hashwhitelist.csv\",\n            \"folder_filename\": \"C:\\\\Windows\\\\Detect\\folderwhitelist.enc\",\n            \"suspectext_filename\": \"C:\\\\Windows\\\\Detect\\\\SuspectExt.enc\",\n            \"safeext_filename\": \"C:\\\\Windows\\\\Detect\\\\SafeExt.enc\",\n            \"suspectext_killswitch\": \"on\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify whether updated end-point config details are been fetched",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const memcryptlogPort = pm.environment.get(\"memcryptLog_port\"); ",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"Analysis\");",
													"    pm.expect(jsonData.config).to.have.property(\"Decryptor\");",
													"    pm.expect(jsonData.config).to.have.property(\"Bands\");",
													"    pm.expect(jsonData.config).to.have.property(\"MonitorStatistics\");",
													"    pm.expect(jsonData.config).to.have.property(\"Whitelist\");",
													"});",
													"",
													"pm.test(\"Verify 'port' in MemcryptLog matches environment variable\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"MemcryptLog\"); ",
													"    pm.expect(jsonData.config.MemcryptLog).to.have.property(\"port\"); ",
													"    pm.expect(jsonData.config.MemcryptLog.port.toString()).to.equal(memcryptlogPort.toString()); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "85d1edd2-a5f1-4141-b686-33311340a6f1"
											}
										}
									],
									"id": "87eda0f1-ff1f-4534-9f22-89ed24bf85aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch end-point config details of all the devices in the org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData;",
													"try {",
													"    jsonData = pm.response.json();",
													"} catch (e) {",
													"    console.error(\"Failed to parse JSON:\", e);",
													"    pm.test(\"Response is valid JSON\", function () {",
													"        pm.expect.fail(\"Response body is not valid JSON\");",
													"    });",
													"    return;  ",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"console.log(\"Device ID from environment:\", deviceID);",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    let found = false;",
													"    jsonData.forEach(function(item) {",
													"        if (item.id.toString() === deviceID.toString()) {",
													"            found = true;",
													"        }",
													"    });",
													"    pm.expect(found).to.be.true; ",
													"});",
													"",
													"",
													"jsonData.forEach(function(item, index) {",
													"    pm.test(`Verify config sections in object #${index + 1}`, function () {",
													"        pm.expect(item).to.have.property('config');",
													"        const config = item.config;",
													"        pm.expect(config).to.have.property(\"Analysis\");",
													"        pm.expect(config).to.have.property(\"Decryptor\");",
													"        pm.expect(config).to.have.property(\"Bands\");",
													"        pm.expect(config).to.have.property(\"MonitorStatistics\");",
													"        pm.expect(config).to.have.property(\"Whitelist\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e83fb944-0bf2-43bd-99ef-51d853916d55"
											}
										}
									],
									"id": "adda1016-1f45-4cd7-8190-7166463848d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												""
											]
										}
									},
									"response": []
								}
							],
							"id": "846ba4e2-8d91-42ea-b1b8-9fd5a29d7d89"
						},
						{
							"name": "Delete Device",
							"item": [
								{
									"name": "Delete device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"pm.test(\"Verify Device Deleted successfully message\", function () {",
													"    pm.expect(jsonData.status).to.include(\"success\");",
													"    pm.expect(jsonData.message).to.include(\"Device Deleted successfully\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "c56cda24-0d1d-4ede-b4c9-d85192386b43"
											}
										}
									],
									"id": "5f97a2c9-c5d0-4dd4-849a-20010167a998",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch a device after delete it",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													"",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"pm.test(\"Verify  error details matches deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"error\"); ",
													"    pm.expect(jsonData).to.have.property(\"code\"); ",
													"});",
													"",
													"",
													"pm.test(\"Verify 'message' in error\", function () {",
													"    pm.expect(jsonData).to.have.property(\"error\"); ",
													"    pm.expect(jsonData.error).to.contain(\"Device not found with the given ID \" + deviceID ); ",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "41443d9b-b1ae-4d55-ae9b-bd13f516af97"
											}
										}
									],
									"id": "d0016844-f852-4e6b-ae61-4510f0016057",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b9b3296b-fc0a-439c-84aa-aad6499ec6bb"
						},
						{
							"name": "Delete User and Organization after console flow",
							"item": [
								{
									"name": "Delete User After console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"  pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ef378050-dc85-4e43-b37f-a112aa87c7c0"
											}
										}
									],
									"id": "64b3660e-1dca-4b46-8d1e-3267e756218f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
											"host": [
												"{{keycloak_url}}"
											],
											"path": [
												"admin",
												"realms",
												"{{realm}}",
												"users",
												"{{AdminUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Org after console flow",
									"id": "b3abf1a4-bc48-4d76-8074-e0abe19b865c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
											"host": [
												"{{keycloak_url}}"
											],
											"path": [
												"admin",
												"realms",
												"{{realm}}",
												"organizations",
												"{{TenantId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c33b29f2-82ec-467f-9afa-ecbe5e7691de",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Store the base URL from the environment variable",
											"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
											"let clientid = pm.environment.get(\"client_id\");",
											"",
											"// Set the base URL, realm, client ID, and client secret",
											" // Replace {keycloak_url} with your Keycloak URL",
											"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
											"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
											"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
											"",
											"// Set the token endpoint",
											"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
											"",
											"// Make the request to get the access token using client credentials",
											"pm.sendRequest({",
											"    url: tokenEndpoint,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/x-www-form-urlencoded'",
											"    },",
											"    body: {",
											"        mode: 'urlencoded',",
											"        urlencoded: [",
											"            { key: 'client_id', value: keycloakclientId },",
											"            { key: 'client_secret', value: keycloakclientSecret },",
											"            { key: 'grant_type', value: 'client_credentials' }",
											"        ]",
											"    }",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Failed to get access token:', err);",
											"    } else {",
											"        let jsonData = res.json();",
											"        ",
											"        if (jsonData.access_token) {",
											"            // Store the access token in an environment variable",
											"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
											"            console.log('Access token:', jsonData.access_token);",
											"        } else {",
											"            console.log('Error retrieving access token:', jsonData);",
											"        }",
											"    }",
											"});",
											""
										],
										"id": "0daa19b4-c66b-48e3-a94b-93ad68c95358"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "f5490666-bde7-46b6-933e-d7309608e148"
									}
								}
							]
						}
					],
					"id": "9b5a3ded-6ef5-4471-8f11-5b7e5d75ac14",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "bf2b0046-1eea-4bc9-955b-0edc11c39194"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "e214a05b-9dcb-4fb7-92ca-f5b4bc0051a0"
							}
						}
					]
				},
				{
					"name": "WhiteListing",
					"item": [
						{
							"name": "Create and Approve User",
							"item": [
								{
									"name": "Create User with valid data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d201eea6-c728-4940-8822-79dae2a895c1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string 'pending'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"pending\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var responsetenantId = jsonData.tenant.id;",
													"var responseadminuserid = jsonData.adminUser.id;",
													"var responseadminusername = jsonData.adminUser.username;",
													"var responseadminemail = jsonData.adminUser.email;",
													"var responseadminfirstname = jsonData.adminUser.firstName;",
													"var responseadminlastname = jsonData.adminUser.lastName;",
													"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
													"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
													"",
													"// Set the id and email as environment variables",
													"pm.environment.set(\"TenantId\", responsetenantId);",
													"pm.environment.set(\"AdminUserId\", responseadminuserid);",
													"pm.environment.set(\"user_username\", responseadminusername);",
													"pm.environment.set(\"Existingusername\", responseadminusername);",
													"pm.environment.set(\"Existingemail\", responseadminemail);",
													"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
													"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
													"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
													"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
													"",
													"pm.environment.set(\"user_refresh_token\", \"test\");",
													"pm.environment.set(\"user_token_expiration\",0);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f54f8db-d9d1-40dd-b7b0-f226c47d815c",
												"exec": [
													"// Function to generate a random string of specified length",
													"function generateRandomString(length) {",
													"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"function generateProfessionalSuffix(length) {",
													"    const suffixes = ['Tech', 'Soft', 'Corp', 'Dyn', 'Sys'];",
													"    return suffixes[Math.floor(Math.random() * suffixes.length)] +",
													"           generateRandomString(length - suffixes[0].length);",
													"}",
													"function generateRandomFirstName() {",
													"    const names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve'];",
													"    return names[Math.floor(Math.random() * names.length)];",
													"}",
													"",
													"function generateRandomCompanyName() {",
													"    const companies = ['abc', 'def', 'xyz'];",
													"    return companies[Math.floor(Math.random() * companies.length)];",
													"}",
													"",
													"function generateGuid() {",
													"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
													"        const r = (Math.random() * 16) | 0,",
													"            v = c === 'x' ? r : (r & 0x3) | 0x8;",
													"        return v.toString(16);",
													"    });",
													"}",
													"",
													"function sanitizeString(str) {",
													"    return str.replace(/[\\s,]/g, ''); ",
													"}",
													"",
													"let customOrgName = \"api-\" + generateProfessionalSuffix(6);;",
													"",
													"customOrgName = sanitizeString(customOrgName);",
													"",
													"if (customOrgName.length > 55) {",
													"    customOrgName = customOrgName.substring(0, 55);",
													"}",
													"",
													"pm.environment.set(\"customOrgName\", customOrgName);",
													"",
													"pm.environment.set(\"randomFirstName\", generateRandomFirstName());",
													"",
													"pm.environment.set(\"randomLastName\", generateRandomFirstName());",
													"",
													"let customEmail = \"api-\"+pm.environment.get(\"randomFirstName\").toLowerCase() + ",
													"                  \".\" + ",
													"                  generateRandomString(5).toLowerCase() + ",
													"                  \"@\" + ",
													"                  generateRandomCompanyName() + ",
													"                  \".com\";",
													"",
													"",
													"if (customEmail.length > 75) {",
													"    customEmail = customEmail.substring(0, 75);",
													"}",
													"",
													"let customUsername =customEmail;",
													"",
													"",
													"pm.environment.set(\"customOrgName\", customOrgName);",
													"pm.environment.set(\"customUsername\", customUsername);",
													"pm.environment.set(\"customEmail\", customEmail);",
													"",
													"",
													"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
													"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
													"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "27481b76-2a64-4d37-8482-64c1cdb69aa3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{App_url}}/api/auth/signup",
											"host": [
												"{{App_url}}"
											],
											"path": [
												"api",
												"auth",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve Created User in console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string 'User approved successfully'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "3bfbcda2-8cf9-42a9-85fe-efbc1e9068b1"
											}
										}
									],
									"id": "0572927a-80df-49de-8b76-b89e1bd23151",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
											"host": [
												"{{App_url}}"
											],
											"path": [
												"api",
												"users",
												"{{AdminUserId}}",
												"approve"
											]
										}
									},
									"response": []
								}
							],
							"id": "fbadec87-a412-4b3c-9e82-964b081d0709",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Store the base URL from the environment variable",
											"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
											"let clientid = pm.environment.get(\"client_id\");",
											"",
											"// Set the base URL, realm, client ID, and client secret",
											" // Replace {keycloak_url} with your Keycloak URL",
											"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
											"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
											"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
											"",
											"// Set the token endpoint",
											"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
											"",
											"// Get the current time and the token expiration time from environment variables",
											"let currentTime = Math.floor(Date.now() / 1000);",
											"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
											"",
											"// Check if the token has expired or is about to expire",
											"if (currentTime >= tokenExpiration - 60) {",
											"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
											"",
											"    // Attempt to refresh the token",
											"    pm.sendRequest({",
											"        url: tokenEndpoint,",
											"        method: \"POST\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
											"        },",
											"        body: {",
											"            mode: \"urlencoded\",",
											"            urlencoded: [",
											"                { key: \"client_id\", value: clientid },",
											"                { key: \"grant_type\", value: \"refresh_token\" },",
											"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
											"            ]",
											"        }",
											"    }, function (err, res) {",
											"        if (err) {",
											"            console.log(\"Token refresh failed for admin:\", err);",
											"        } else {",
											"            try {",
											"                let jsonData = res.json();",
											"",
											"                // Check if there is an invalid grant error",
											"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
											"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
											"               ",
											"                    // Handle the invalid grant error by re-authenticating",
											"                    pm.sendRequest({",
											"                        url: tokenEndpoint,",
											"                        method: \"POST\",",
											"                        header: {",
											"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
											"                        },",
											"                        body: {",
											"                            mode: \"urlencoded\",",
											"                            urlencoded: [",
											"                                { key: \"client_id\", value: clientid },",
											"                                { key: \"grant_type\", value: \"password\" },",
											"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
											"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
											"                                { key: \"scope\", value: \"openid\" }",
											"                            ]",
											"                        }",
											"                    }, function (authErr, authRes) {",
											"                        if (authErr) {",
											"                            console.log(\"Re-authentication failed for admin:\", authErr);",
											"                        } else {",
											"                            let authData = authRes.json();",
											"",
											"                            // Update the access token, refresh token, and expiration time",
											"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
											"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
											"",
											"                            // Calculate and store the new token expiration time",
											"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
											"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
											"",
											"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
											"                        }",
											"                    });",
											"                } else {",
											"                    // Update the access token, refresh token, and expiration time",
											"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
											"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
											"",
											"                    // Calculate and store the new token expiration time",
											"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
											"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
											"",
											"                    console.log(\"Admin Token refreshed successfully.\");",
											"                }",
											"            } catch (e) {",
											"                console.log(\"Error parsing response for admin:\", e);",
											"            }",
											"        }",
											"    });",
											"} else {",
											"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
											"}",
											"",
											"//keycloak",
											"",
											"",
											"",
											"",
											""
										],
										"id": "801f13f0-8416-4897-9cc2-7ef54b351b38"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "27348369-0267-4f48-a006-dd6ac3e3f720"
									}
								}
							]
						},
						{
							"name": "Add Device",
							"item": [
								{
									"name": "Create Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const deviceSerialNumber = pm.environment.get(\"deviceSerialNumber\");",
													"",
													"var responseDeviceId = jsonData.id;",
													"",
													"// Set the id and email as environment variables",
													"pm.environment.set(\"deviceID\", responseDeviceId);",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is deviceSerialNumber\", function () {",
													"    pm.expect(jsonData).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.serial_number.toString()).to.equal(deviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "c9dbcbcc-bb8a-4a2f-baf0-ea630013df3b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1 and 999999999",
													"const serialNumber = Math.floor(1 + Math.random() * 999999999);",
													"",
													"// Log the serial number for debugging",
													"console.log(\"Generated Serial Number: \" + serialNumber);",
													"",
													"// Set the serial number as an environment variable",
													"pm.environment.set(\"deviceSerialNumber\", serialNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "69806530-96ab-4050-b834-2c8b55072397"
											}
										}
									],
									"id": "b107ba7a-981c-4150-b993-97f616268040",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{deviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								}
							],
							"id": "2d338fc5-b2f4-4cf5-b322-b7b43ccfed41",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "69f72e41-49d1-4c7c-adfa-ac6a97f15fab"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "392c5ef3-9ace-4c24-9704-4523363bc140"
									}
								}
							]
						},
						{
							"name": "Add Application",
							"item": [
								{
									"name": "Create Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const applicationName = `AppName-${Math.random().toString(36).substring(2, 8)}`;\r",
													"\r",
													"pm.environment.set(\"applicationName\", applicationName);\r",
													"\r",
													"console.log(`Generated application Name: ${applicationName}`);\r",
													"\r",
													"function generateRandomHash(length = 10) {\r",
													"  return [...Array(length)]\r",
													"    .map(() => Math.random().toString(36).substring(2, 3))\r",
													"    .join('');\r",
													"}\r",
													"const randomHash = generateRandomHash();\r",
													"\r",
													"// Set the generated hash as an environment variable\r",
													"pm.environment.set(\"hash\", randomHash);\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ae03afc1-03b2-4fa2-bd76-c4ab702e94ef"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var responseapplicationid = jsonData.id;\r",
													"var responseaplicatiomnname=jsonData.name;\r",
													"pm.environment.set(\"ApplicationId\", responseapplicationid);\r",
													"pm.environment.set(\"Applicationname\", responseaplicatiomnname);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "159fe668-762e-4b51-913c-44cdfcf66596"
											}
										}
									],
									"id": "ea2bd6b2-9e25-433b-a6c4-1105c6985966",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{applicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{hash}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  Duplicate Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "267d4388-743b-48cc-8557-2e2674869bbc"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body contains string as duplicate application\",function(){\r",
													"      pm.expect(pm.response.text()).to.include(\"Application with name \"+pm.environment.get(\"applicationName\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8a30a2f6-ebd3-4b86-a92e-2cb43b19b096"
											}
										}
									],
									"id": "678cea6b-4828-41a9-a874-5d38832558a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{applicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{hash}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Application with missing fileds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "7ead04ff-441b-4f3b-b989-d7fe4197b150"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'Validation error'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f93e113d-cb83-4151-b75c-a1de748cbce3"
											}
										}
									],
									"id": "01c64aca-193c-4773-a8ab-6ef14030506a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{applicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\"\r\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Application with no parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "3c2cbc2e-c4a3-47d6-a11d-ef3abd4d6639"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'Validation error'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "bf9d64d1-406c-42d7-9681-02c3f68d6ee2"
											}
										}
									],
									"id": "5ccb6d8c-3baa-47ae-86f4-2df9c33859f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"\",\r\n  \"version\": \"\",\r\n  \"publisher\": \"\",\r\n  \"hash\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create multiple Application with valid data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d52d542a-301f-4b71-b7d0-0933bbf214cd"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'Validation error'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "22751870-cf8f-4e24-80e1-d2a0704c8cf9"
											}
										}
									],
									"id": "b722727d-ec70-4db8-9c36-31e4cd70785d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[   \r\n {\r\n  \"name\": \"Visual Studio Code1\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"a1b2c3d4e5f6g7h8i9j0k\"\r\n },\r\n {\r\n  \"name\": \"Visual Studio Code2\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"a1b2c3d4e5f6g7h8i9j0k\"\r\n}\r\n\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								}
							],
							"id": "87bb344b-1e29-4b44-b9cf-042e5651098d",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "e74338a2-06a7-4804-ac7f-447d05e6c6d7"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "47cc55df-5bdf-4023-a040-e9e636bb146d"
									}
								}
							]
						},
						{
							"name": "Fetch Applications",
							"item": [
								{
									"name": "Fetch all Applications in a Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches  application name\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"applicationName\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "80e2237e-4a05-4b36-9c02-b76081d196a8"
											}
										}
									],
									"id": "86cb0620-4587-4694-a17f-323039424a7e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications?skip=0&limit=100",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c731d1e4-4b6f-4b6c-b645-6bc00611044d",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "0b51dbda-aa81-49c1-a789-dde280b1255d"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "4934a53b-78df-41ee-97cb-4db957e0384c"
									}
								}
							]
						},
						{
							"name": "Fetch inventory details before inventory is added",
							"item": [
								{
									"name": "Fetch All inventory with in device when inventory not available",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"const deviceID = pm.environment.get(\"deviceID\");\r",
													"\r",
													"var jsonData=pm.response.json();\r",
													"\r",
													"pm.test(\"Verify 'message' in error\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"error\"); \r",
													"    pm.expect(jsonData.error).to.contain(\"No inventory found for device with id \" + deviceID ); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8fd7429b-8572-4922-b881-5be755f2c71c"
											}
										}
									],
									"id": "297d5424-77df-4197-b2d6-64f6baa48090",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								}
							],
							"id": "b9aeb227-902b-4f71-a381-caf06e56be74",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "a9247c4e-9577-4063-9cf0-3e3c75f3aa27"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "def86c94-864a-46f7-9a48-556f2c5237ad"
									}
								}
							]
						},
						{
							"name": "Create device Inventory",
							"item": [
								{
									"name": "Create device inventory with valid data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let responseData = pm.response.json();\r",
													"\r",
													"let inventoryId = responseData[0].id;\r",
													"\r",
													"pm.environment.set(\"inventory_id\", inventoryId);\r",
													"\r",
													"console.log(\"Inventory ID:\", inventoryId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "512a5f2e-3c60-4f6c-9a77-04900bbbc86b"
											}
										}
									],
									"id": "469e5855-6dfb-4f93-8400-98b968d89839",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"name\": \"{{applicationName}}\",\r\n      \"version\": \"1.82.0\",\r\n      \"publisher\": \"Microsoft\",\r\n      \"hash\": \"{{hash}}\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create device inventory with duplicate data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a14cca56-e4a6-4b72-adb4-67f3d4efe3b4"
											}
										}
									],
									"id": "2f00edb1-94ad-4f26-8c67-3eb11a5a4f64",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwUUFZYUpuXzFxNlVBanJWOEhSbkFaYWJyVmp4TkdrakhXYm55S0sycy1NIn0.eyJleHAiOjE3Mjc5NTY4MDcsImlhdCI6MTcyNzk1NjUwNywiYXV0aF90aW1lIjoxNzI3OTU1NjY5LCJqdGkiOiJjYWQwZDE1Mi00YmY4LTRjZDktOWY1MC1iODJiMGNjNzg1NWEiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODEvcmVhbG1zL21lbWNyeXB0IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjdkY2IyM2U3LTIzNDgtNDFmNS05MjBlLTgyZDA5Y2JjNWViZSIsInR5cCI6IkJlYXJlciIsImF6cCI6Im1lbWNyeXB0LWZyb250ZW5kIiwic2lkIjoiMmMyZDA1MTUtMmU4Yi00NDhjLTg0YzItMWU5ZDQzMzcxYTNiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL29hdXRoLnBzdG1uLmlvIiwiaHR0cDovL2xvY2FsaG9zdDozMDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAxIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLW1lbWNyeXB0Iiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsIk9SR19BRE1JTiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjEyNDBmMGY3LTE2ZDUtNDI4Ny05YWUwLWQ3Y2NjNDVmNWM1OSIsIm5hbWUiOiJNZWdnaWUgQWRhbXMiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJnb2VtYzY1OTAzNTM0LTEzZjMtNDlhZi1icTFnNTFhdmVyeXU3cCIsImdpdmVuX25hbWUiOiJNZWdnaWUiLCJmYW1pbHlfbmFtZSI6IkFkYW1zIiwiZW1haWwiOiJ5bXFhbHljaWFrc2oydmRjMzczM2RiLTY0OTgtNDNkZS04MzB6bnpjb21ub3ZhLmtlbW1lcjU5QGhvdG1haWwuY29tIn0.kRODgkino0SktkQL2kMFTpoMDAnZyLtFt69ob-AYyV5OE7crV-pZQ70588Ey4yo866AotZTsrqY7Crz4zMx9POo-o-2MUojDUh8mmacrgGiK6fe4PXsdhn6e4r7cVNKUfhUNzGP-6R_lqvq91NGfr1EY0P74n3jHuLPbVuB-r-8DOluNVEA4n4jDw2ZK5XVBNvjcvQf5YznfhGR2UFLqTlG_5i7KrY2Q75BMCSckBbOY-yOmE9izjImi1WxlYTSRxeoy6j-yeKjKNN1QnwT9B83JkY-KLhQG4r-OvsCXIHrk9FWkqylCJcNrG4Jg6xzhGFEjprW5we7vD9Fq98PdrA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"name\": \"{{applicationName}}\",\r\n      \"version\": \"1.82.0\",\r\n      \"publisher\": \"Microsoft\",\r\n      \"hash\": \"{{hash}}\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create device inventory with invalid  data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'Validation error'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "501d668d-afc5-4f74-8e8b-2d2d825b2ce1"
											}
										}
									],
									"id": "a5c7e0b5-a2cd-40be-985f-7c20415ba583",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"name\": \"\",\r\n      \"version\": \"\",\r\n      \"publisher\": \"\",\r\n      \"hash\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create device inventory with invalid  device Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Body should containg a string device not found\",function(){\r",
													"  pm.expect(pm.response.text()).to.include(\"not found\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "65bbf99d-1b8d-4569-a728-9fa07cbdbba3"
											}
										}
									],
									"id": "2303298a-46d3-46d5-81f0-9d91c94274fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"name\": \"{{applicationName}}\",\r\n      \"version\": \"1.82.0\",\r\n      \"publisher\": \"Microsoft\",\r\n      \"hash\": \"{{hash}}\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/458712/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"458712",
												"inventory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create device inventory with missing parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'Validation error'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f8c738cd-cbb6-43ff-82a6-507789265dfa"
											}
										}
									],
									"id": "3e67fc98-2970-41b2-bc2c-0ed8f3415e16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwUUFZYUpuXzFxNlVBanJWOEhSbkFaYWJyVmp4TkdrakhXYm55S0sycy1NIn0.eyJleHAiOjE3Mjc5NTY4MDcsImlhdCI6MTcyNzk1NjUwNywiYXV0aF90aW1lIjoxNzI3OTU1NjY5LCJqdGkiOiJjYWQwZDE1Mi00YmY4LTRjZDktOWY1MC1iODJiMGNjNzg1NWEiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODEvcmVhbG1zL21lbWNyeXB0IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjdkY2IyM2U3LTIzNDgtNDFmNS05MjBlLTgyZDA5Y2JjNWViZSIsInR5cCI6IkJlYXJlciIsImF6cCI6Im1lbWNyeXB0LWZyb250ZW5kIiwic2lkIjoiMmMyZDA1MTUtMmU4Yi00NDhjLTg0YzItMWU5ZDQzMzcxYTNiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL29hdXRoLnBzdG1uLmlvIiwiaHR0cDovL2xvY2FsaG9zdDozMDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAxIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLW1lbWNyeXB0Iiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsIk9SR19BRE1JTiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjEyNDBmMGY3LTE2ZDUtNDI4Ny05YWUwLWQ3Y2NjNDVmNWM1OSIsIm5hbWUiOiJNZWdnaWUgQWRhbXMiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJnb2VtYzY1OTAzNTM0LTEzZjMtNDlhZi1icTFnNTFhdmVyeXU3cCIsImdpdmVuX25hbWUiOiJNZWdnaWUiLCJmYW1pbHlfbmFtZSI6IkFkYW1zIiwiZW1haWwiOiJ5bXFhbHljaWFrc2oydmRjMzczM2RiLTY0OTgtNDNkZS04MzB6bnpjb21ub3ZhLmtlbW1lcjU5QGhvdG1haWwuY29tIn0.kRODgkino0SktkQL2kMFTpoMDAnZyLtFt69ob-AYyV5OE7crV-pZQ70588Ey4yo866AotZTsrqY7Crz4zMx9POo-o-2MUojDUh8mmacrgGiK6fe4PXsdhn6e4r7cVNKUfhUNzGP-6R_lqvq91NGfr1EY0P74n3jHuLPbVuB-r-8DOluNVEA4n4jDw2ZK5XVBNvjcvQf5YznfhGR2UFLqTlG_5i7KrY2Q75BMCSckBbOY-yOmE9izjImi1WxlYTSRxeoy6j-yeKjKNN1QnwT9B83JkY-KLhQG4r-OvsCXIHrk9FWkqylCJcNrG4Jg6xzhGFEjprW5we7vD9Fq98PdrA",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"name\": \"AppName_1\",\r\n      \"version\": \"1.82.0\",\r\n      \"hash\": \"{{hash}}\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								}
							],
							"id": "e5263383-4f77-4d9e-b175-3fda8b81f919",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "f4686989-4bac-4eb7-a40e-f86d30d28fd9"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "f6539f6c-158d-49ef-bb5f-c1ee6312c7b6"
									}
								}
							]
						},
						{
							"name": "Fetch Inventory details after inventory is added",
							"item": [
								{
									"name": "Fetch All inventory with in device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body should containg a string device id\",function(){\r",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"deviceID\"));\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "db3c8621-4706-4e02-8450-c58bead9c1f0"
											}
										}
									],
									"id": "8cd1b654-97c6-4e05-8b6c-35d81706999d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								}
							],
							"id": "1943ca0a-d894-446f-8d71-0ad194233959",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "bebf3a7f-f599-44ba-84b6-a1ab1d1f5601"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "b46b2868-516e-4b32-8034-036106bc4b3b"
									}
								}
							]
						},
						{
							"name": "Approve Application",
							"item": [
								{
									"name": "Approving a application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body should containg a string appication name\",function(){\r",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"Applicationname\"));\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "7d165792-68ad-46db-ba97-5048a05796d4"
											}
										}
									],
									"id": "765c2239-9a5f-40d6-89ce-3eb776dc5389",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/approve",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"{{ApplicationId}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approving already approved application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const ApplicationId=pm.environment.get(\"ApplicationId\");\r",
													"\r",
													"pm.test(\"Body matches string with already approved\",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"Application \"+ApplicationId+\" is already in Approved or Denied state\");\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "5ed1e4b2-2c11-41ce-88de-18e59b875b06"
											}
										}
									],
									"id": "220d0bf4-39e9-4336-a279-12e40201f01c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/approve",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"{{ApplicationId}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approving invalid application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string with not found\",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"Application with id 12345 not found\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "852acb0a-7e05-4b59-969a-79744b13023d"
											}
										}
									],
									"id": "eb8c5510-7c35-4fbf-9d2f-c7b7cad30f54",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/12345/approve",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"12345",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve application with invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"  pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string with UNAUTHORIZED \",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"UNAUTHORIZED\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8fffe443-ed3f-4c58-b774-56a58b8df556"
											}
										}
									],
									"id": "50ba3735-a2f3-46cc-aa10-52909002e821",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "144756551wertyuighfdghj",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/approve",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"{{ApplicationId}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve application with admin access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"  pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string with UNAUTHORIZED \",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"UNAUTHORIZED\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a8d5aba9-75b2-4626-b5ca-30fe3e416992"
											}
										}
									],
									"id": "1769802f-b7a3-4c2a-9186-95ae569ee204",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/approve",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"{{ApplicationId}}",
												"approve"
											]
										}
									},
									"response": []
								}
							],
							"id": "60d09996-7224-44f5-9cc8-5d4d3ddd59ea",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "10755130-6883-4054-96e4-44b3e9a7611c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "bc2d8055-f345-49f8-b909-1d06ab0e5159"
									}
								}
							]
						},
						{
							"name": "Fetch Application and inventory status when approved",
							"item": [
								{
									"name": "Fetch Applications having Approved status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27017711-3e41-46dd-91c6-3eece5294301",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify application id has status approved\", function () {\r",
													"  let jsonData = pm.response.json();\r",
													"    let targetId = pm.environment.get(\"ApplicationId\");\r",
													"    let found = jsonData.applications.find(item => item.id === targetId);\r",
													"    pm.expect(found).to.be.an(\"object\");\r",
													"    pm.expect(found.status).to.eql(\"approved\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ef6d0a45-6c37-4fcf-a762-0baace2312dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications?skip=0&limit=100",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch inventory with in device having Approved status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7d18c6f-32ca-43e8-a6db-0950109fa71d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    console.log(\"status\");\r",
													"  pm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify application id has status approved\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    let targetId = pm.environment.get(\"ApplicationId\");\r",
													"    console.log(pm.environment.get(\"ApplicationId\"));\r",
													"    let found = jsonData.inventory.find(item => item.application.id === targetId);\r",
													"    pm.expect(found).to.be.an(\"object\");\r",
													"    console.log(found.status);\r",
													"    pm.expect(found.status).to.eql(\"approved\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3cf30652-cc3a-4699-a7f9-7f451b1e53e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								}
							],
							"id": "7c70a92e-bcc5-46c3-b61d-d2304e3a60a3",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "36622b89-2209-4e69-ba5e-117b8b48d902"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "c1073aa1-d3d2-4874-84f8-0354195d20ce"
									}
								}
							]
						},
						{
							"name": "Delete Inventory",
							"item": [
								{
									"name": "Delete Inventory using admin access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"  pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string with UNAUTHORIZED \",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"UNAUTHORIZED\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8b878899-fcc3-4f49-935b-412dc5a56e69"
											}
										}
									],
									"id": "8297842d-bb22-41d8-bc5a-f0bc2a1df89e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/inventory/{{inventory_id}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"inventory",
												"{{inventory_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Inventory using user access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"const inventoryId = pm.environment.get(\"inventory_id\");\r",
													"\r",
													"\r",
													"pm.test(\"Body matches string with successfully deleted\",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"Inventory item \"+inventoryId+\" successfully deleted\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "3ba8411a-42be-44d4-a7a6-e5e3a2f6ba88"
											}
										}
									],
									"id": "104054ca-837a-4cf1-87a0-b2725946dc9f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/inventory/{{inventory_id}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"inventory",
												"{{inventory_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c7fc60d6-96ff-4369-b631-2a8812b7172d",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "9ded04f5-362e-4e45-9282-6d38d169259d"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "ba661864-4351-442a-a391-52cc95d1aa75"
									}
								}
							]
						},
						{
							"name": "Reject Application",
							"item": [
								{
									"name": "Create Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random name\r",
													"const applicationName = `AppName-${Math.random().toString(36).substring(2, 8)}`;\r",
													"\r",
													"// Set the variable for the request body\r",
													"pm.environment.set(\"applicationName\", applicationName);\r",
													"\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);\r",
													"function generateRandomHash(length = 10) {\r",
													"  return [...Array(length)]\r",
													"    .map(() => Math.random().toString(36).substring(2, 3))\r",
													"    .join('');\r",
													"}\r",
													"\r",
													"const randomHash = generateRandomHash();\r",
													"\r",
													"// Set the generated hash as an environment variable\r",
													"pm.environment.set(\"hash\", randomHash);\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "cd2f4674-4703-46fc-9fc0-deae264d6890"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var responseapplicationid = jsonData.id;\r",
													"var responseaplicatiomnname=jsonData.name;\r",
													"pm.environment.set(\"ApplicationId\", responseapplicationid);\r",
													"pm.environment.set(\"Applicationname\", responseaplicatiomnname);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d6f129a5-554c-4c73-9654-d1290ba4d540"
											}
										}
									],
									"id": "c7e27672-da39-4330-a177-5858208932c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{applicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{hash}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rejecting a application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body should containg a string appication name\",function(){\r",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"Applicationname\"));\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "32d6ba7f-ca52-41ef-9024-eff98142dd5c"
											}
										}
									],
									"id": "37b78f2c-ed2a-44a4-a41c-634621d07e5a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/deny",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"{{ApplicationId}}",
												"deny"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rejecting application which is already rejected",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const ApplicationId=pm.environment.get(\"ApplicationId\");\r",
													"\r",
													"pm.test(\"Body matches string with already Denied\",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"Application \"+ApplicationId+\" is already in Approved or Denied state\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "6776765d-885f-44ab-a85d-1c52a4eca9f5"
											}
										}
									],
									"id": "17b31123-9dc0-4c84-a15a-04605ba5c446",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/deny",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"{{ApplicationId}}",
												"deny"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rejecting invalid application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string with not found\",function(){\r",
													"   pm.expect(pm.response.text()).to.include(\"Application with id 12345 not found\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "c2f0ead6-4750-40e4-bf91-872b6344406f"
											}
										}
									],
									"id": "86ed7023-970b-4cd9-a1ec-daf2dc823c76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/12345/deny",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"12345",
												"deny"
											]
										}
									},
									"response": []
								}
							],
							"id": "b6ace08d-8d7d-4e4e-91aa-1b1d91ce4c0f",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "fc19693b-0185-42d3-8d24-a37486195bc5"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "eed536f1-42d7-4310-a4ac-21a554d6c6c6"
									}
								}
							]
						},
						{
							"name": "Fetch Application and inventory status when Rejected",
							"item": [
								{
									"name": "Fetch the Applications having Rejected status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "890b0430-9ee8-47cf-b17c-425a50c20082",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify application id has status rejected\", function () {\r",
													"  let jsonData = pm.response.json();\r",
													"    let targetId = pm.environment.get(\"ApplicationId\");\r",
													"    let found = jsonData.applications.find(item => item.id === targetId);\r",
													"    pm.expect(found).to.be.an(\"object\");\r",
													"    console.log(found.status);\r",
													"    pm.expect(found.status).to.eql(\"denied\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b5ba42a3-c0fc-4ff7-90bb-bcac0e3e791f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications?skip=0&limit=100",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch inventory with in device having Rejected status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d93a430a-7996-4d04-8eec-38c7c106c218",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Body should containg a string No inventory found \",function(){\r",
													"  pm.expect(pm.response.text()).to.include(\"No inventory found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fba0bc49-1d02-4f13-aab4-88d05fc9fd62",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"inventory"
											]
										}
									},
									"response": []
								}
							],
							"id": "15676185-3414-4084-804f-d15103ebacbf",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "f7197199-abba-4f8e-9b41-c6a051dd2cda"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "7f4b49d8-1325-40e7-9fcb-b5f7998993e2"
									}
								}
							]
						},
						{
							"name": "Bulk Approve Applications",
							"item": [
								{
									"name": "Create Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random name\r",
													"const applicationName = `AppName-${Math.random().toString(36).substring(2, 8)}`;\r",
													"\r",
													"// Set the variable for the request body\r",
													"pm.environment.set(\"applicationName\", applicationName);\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);\r",
													"\r",
													"\r",
													"function generateRandomHash(length = 10) {\r",
													"  return [...Array(length)]\r",
													"    .map(() => Math.random().toString(36).substring(2, 3))\r",
													"    .join('');\r",
													"}\r",
													"\r",
													"const randomHash = generateRandomHash();\r",
													"\r",
													"// Set the generated hash as an environment variable\r",
													"pm.environment.set(\"hash\", randomHash);\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a526d77a-43a2-4590-88e2-c36683de88bf"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var responseapplicationid = jsonData.id;\r",
													"var responseaplicatiomnname=jsonData.name;\r",
													"pm.environment.set(\"ApplicationId\", responseapplicationid);\r",
													"pm.environment.set(\"Applicationname\", responseaplicatiomnname);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "0aaff20c-4b49-452d-ac50-8e94cf87254d"
											}
										}
									],
									"id": "07e31dd5-769a-4671-a027-aa44e18cd419",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"name\": \"{{applicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{hash}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"const secondApplicationName = `AppName-${Math.random().toString(36).substring(2, 8)}`;\r",
													"\r",
													"// Set the variable for the request body\r",
													"\r",
													"\r",
													"pm.environment.set(\"secondApplicationName\", secondApplicationName);\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${secondApplicationName}`);\r",
													"\r",
													"function generateRandomHash(length = 10) {\r",
													"  return [...Array(length)]\r",
													"    .map(() => Math.random().toString(36).substring(2, 3))\r",
													"    .join('');\r",
													"}\r",
													"\r",
													"const randomHash = generateRandomHash();\r",
													"\r",
													"// Set the generated hash as an environment variable\r",
													"pm.environment.set(\"secondHash\", randomHash);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "1c80d0db-e787-4d37-8d5b-6afb860a399e"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var responsesecondapplicationid = jsonData.id;\r",
													"var responsesecondaplicatiomnname=jsonData.name;\r",
													"pm.environment.set(\"secondApplicationId\", responsesecondapplicationid);\r",
													"pm.environment.set(\"secondApplicationname\", responsesecondaplicatiomnname);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d784b0df-7aa4-4634-8db9-a427f7513e09"
											}
										}
									],
									"id": "541e480b-1564-42a3-b0aa-56c6da1abb41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"name\": \"{{secondApplicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{secondHash}}\"\r\n }\r\n  ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approving bulk Applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body should containg a string appication name\",function(){",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"Applicationname\"));",
													"})",
													"",
													"pm.test(\"Body should containg a string appication name\",function(){",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"secondApplicationName\"));",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "423045d2-6d0a-4c3b-901e-ee764dc7da89"
											}
										}
									],
									"id": "11e9371d-fc4f-4375-a75d-e661abe90550",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"{{ApplicationId}}\",\n  \"{{secondApplicationId}}\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/bulk-approve",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"bulk-approve"
											]
										}
									},
									"response": []
								}
							],
							"id": "47522adc-4afe-4889-85f2-99662868cef7",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "0a6a2ee8-bc12-4c53-b2d8-bca4aae074be"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "3f8c08e1-0619-499c-a343-4b2a63fb06d5"
									}
								}
							]
						},
						{
							"name": "Bulk Reject Applications",
							"item": [
								{
									"name": "Create Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random name\r",
													"const applicationName = `AppName-${Math.random().toString(36).substring(2, 8)}`;\r",
													"\r",
													"// Set the variable for the request body\r",
													"pm.environment.set(\"applicationName\", applicationName);\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);\r",
													"\r",
													"\r",
													"function generateRandomHash(length = 10) {\r",
													"  return [...Array(length)]\r",
													"    .map(() => Math.random().toString(36).substring(2, 3))\r",
													"    .join('');\r",
													"}\r",
													"\r",
													"const randomHash = generateRandomHash();\r",
													"\r",
													"// Set the generated hash as an environment variable\r",
													"pm.environment.set(\"hash\", randomHash);\r",
													"\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${applicationName}`);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "3d1c9bb8-f0d4-48c6-a005-35fbbb824d06"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var responseapplicationid = jsonData.id;\r",
													"var responseaplicatiomnname=jsonData.name;\r",
													"pm.environment.set(\"ApplicationId\", responseapplicationid);\r",
													"pm.environment.set(\"Applicationname\", responseaplicatiomnname);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d28b3080-6138-44e8-a669-ee51ee17d0cf"
											}
										}
									],
									"id": "463def20-39df-48c6-ad0f-eb987eda7db5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"name\": \"{{applicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{hash}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"const secondApplicationName = `AppName-${Math.random().toString(36).substring(2, 8)}`;\r",
													"\r",
													"// Set the variable for the request body\r",
													"\r",
													"\r",
													"pm.environment.set(\"secondApplicationName\", secondApplicationName);\r",
													"// Log the generated random name\r",
													"console.log(`Generated application Name: ${secondApplicationName}`);\r",
													"\r",
													"function generateRandomHash(length = 10) {\r",
													"  return [...Array(length)]\r",
													"    .map(() => Math.random().toString(36).substring(2, 3))\r",
													"    .join('');\r",
													"}\r",
													"\r",
													"const randomHash = generateRandomHash();\r",
													"\r",
													"// Set the generated hash as an environment variable\r",
													"pm.environment.set(\"secondHash\", randomHash);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d0b4e5cf-fb1b-4367-ae5b-3dcc1593f599"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var responsesecondapplicationid = jsonData.id;\r",
													"var responsesecondaplicatiomnname=jsonData.name;\r",
													"pm.environment.set(\"secondApplicationId\", responsesecondapplicationid);\r",
													"pm.environment.set(\"secondApplicationname\", responsesecondaplicatiomnname);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "fa537e77-1405-45ba-b975-9e9ee346af66"
											}
										}
									],
									"id": "0ea69e12-8050-4abf-9251-5495934803ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"name\": \"{{secondApplicationName}}\",\r\n  \"version\": \"1.82.0\",\r\n  \"publisher\": \"Microsoft\",\r\n  \"hash\": \"{{secondHash}}\"\r\n }\r\n  ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rejecting bulk Applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body should containg a string appication name\",function(){",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"Applicationname\"));",
													"})",
													"",
													"pm.test(\"Body should containg a string appication name\",function(){",
													"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"secondApplicationName\"));",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "b034fe0a-7ceb-40e4-9034-8ed3e79aadf5"
											}
										}
									],
									"id": "4dd21550-651a-46b0-9e1b-1f05caa901e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"{{ApplicationId}}\",\n  \"{{secondApplicationId}}\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/applications/bulk-deny",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"applications",
												"bulk-deny"
											]
										}
									},
									"response": []
								}
							],
							"id": "d4d6b569-157a-4f84-9cfb-fec03253407a",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "1ad887f3-4570-4337-bcef-9257f8153d13"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "f65053f3-ce4b-48a2-9252-6dd3af185c49"
									}
								}
							]
						}
					],
					"id": "070e3827-3840-4955-a780-eb184626f347",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "fd788b25-8311-4b3f-ac84-c648e585e9dd"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "438e12de-8290-477d-9aeb-c074b0570d45"
							}
						}
					]
				},
				{
					"name": "Activity Logs",
					"item": [
						{
							"name": "Creating Activity logs",
							"item": [
								{
									"name": "Creating a Activity log record against the device",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate current date and time in ISO 8601 format",
													"let currentTimestamp = new Date().toISOString();",
													"",
													"// Set this value in an environment variable",
													"pm.environment.set(\"currentTimestamp\", currentTimestamp);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "846d426d-1538-465b-ac2b-201dcf0beaf6"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "44757b54-ee30-4f31-9e4e-0963608bf323"
											}
										}
									],
									"id": "1b77e587-4ceb-49ca-a4ec-3714c50c4253",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1OElOME41S0syM3h3V2xxREk3T2hQVUVsYlViOWZIdFAxMTBpeU02NFg4In0.eyJleHAiOjE3MzAxOTgxNzEsImlhdCI6MTczMDE5Nzg3MSwianRpIjoiNzJkZjA0NzktZjAxOC00M2VkLTg5NWQtMmE0MjIyNDIwOTQzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL3JlYWxtcy9tZW1jcnlwdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5ZjI5YzYzNi1lZmMyLTRiMWUtYTMwMC0xNzBkZGY0MmU1YzEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZW1jcnlwdC1mcm9udGVuZCIsInNpZCI6IjZiNWU0ZmQ0LWQzNGUtNDY4Ny1iZTdlLWJlNWQ3Yjk1OWNiZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9vYXV0aC5wc3Rtbi5pbyIsImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMSJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1tZW1jcnlwdCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJPUkdfQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjJiNThjZWVjLTY5MzMtNGEyNC05ZTYwLWFlODIzMDk0MjUzZiIsIm5hbWUiOiJhcnVuIGt1bWFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSIsImdpdmVuX25hbWUiOiJhcnVuIiwiZmFtaWx5X25hbWUiOiJrdW1hciIsImVtYWlsIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSJ9.LKCbJvdYgqzO0KgXoBbq2CsPXrWr-JvvteF67ymWD57mda26e0QL5vI8W0p38pLJUKeqjcHhfIWdeFEc6c66O_zJxRE96_ij4-tJkJ1booGoUVfsC6wwRpNnGExyNvDBLjBUVEmv9xExkToO-WMhsOsbbofW8q-oP03wiWf80lcXrFgJm4il7hhDXF0EuS3wy1_NqjzaQ0jE7Y5kOEl5Ta4SogjSVeVXSRsLpG-pz8y3ppj5ZTXx5rt7GGRd1GyaSrLR5uSccVqqGr19zUQbRx9gUIYZCzsMTtUQEYOAju5MB4tSa87uRU4Yfa9KCG2pgTNsqzra7ldqEzCM-Pwp2w"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {   \n        \"device_id\": \"{{deviceID}}\",   \n        \"activity_type\": \"RANSOMWARE_DETECTION\",   \n        \"severity\": \"High\",   \n        \"details\": {     \n            \"threat_name\": \"WannaCry\",     \n            \"affected_files\": [       \n                \"C:/Users/Documents/important.doc\",       \n                \"C:/Users/Desktop/critical.xlsx\"     \n            ],     \n            \"detection_method\": \"BEHAVIOR_ANALYSIS\",     \n            \"action_taken\": \"QUARANTINE\",     \n            \"timestamp\": \"{{currentTimestamp}}\"   \n        } \n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating multiple Activity log records against the device",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate current date and time in ISO 8601 format",
													"let currentTimestamp = new Date().toISOString();",
													"",
													"// Set this value in an environment variable",
													"pm.environment.set(\"currentTimestamp\", currentTimestamp);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ef6651aa-5cbe-45eb-ac08-23e1f9f1d2bf"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f58d07fb-ccd9-4118-8e31-c92725d347a9"
											}
										}
									],
									"id": "a76613b3-a05f-42a4-ae97-3edd75ffe109",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1OElOME41S0syM3h3V2xxREk3T2hQVUVsYlViOWZIdFAxMTBpeU02NFg4In0.eyJleHAiOjE3MzAxOTgxNzEsImlhdCI6MTczMDE5Nzg3MSwianRpIjoiNzJkZjA0NzktZjAxOC00M2VkLTg5NWQtMmE0MjIyNDIwOTQzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL3JlYWxtcy9tZW1jcnlwdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5ZjI5YzYzNi1lZmMyLTRiMWUtYTMwMC0xNzBkZGY0MmU1YzEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZW1jcnlwdC1mcm9udGVuZCIsInNpZCI6IjZiNWU0ZmQ0LWQzNGUtNDY4Ny1iZTdlLWJlNWQ3Yjk1OWNiZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9vYXV0aC5wc3Rtbi5pbyIsImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMSJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1tZW1jcnlwdCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJPUkdfQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjJiNThjZWVjLTY5MzMtNGEyNC05ZTYwLWFlODIzMDk0MjUzZiIsIm5hbWUiOiJhcnVuIGt1bWFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSIsImdpdmVuX25hbWUiOiJhcnVuIiwiZmFtaWx5X25hbWUiOiJrdW1hciIsImVtYWlsIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSJ9.LKCbJvdYgqzO0KgXoBbq2CsPXrWr-JvvteF67ymWD57mda26e0QL5vI8W0p38pLJUKeqjcHhfIWdeFEc6c66O_zJxRE96_ij4-tJkJ1booGoUVfsC6wwRpNnGExyNvDBLjBUVEmv9xExkToO-WMhsOsbbofW8q-oP03wiWf80lcXrFgJm4il7hhDXF0EuS3wy1_NqjzaQ0jE7Y5kOEl5Ta4SogjSVeVXSRsLpG-pz8y3ppj5ZTXx5rt7GGRd1GyaSrLR5uSccVqqGr19zUQbRx9gUIYZCzsMTtUQEYOAju5MB4tSa87uRU4Yfa9KCG2pgTNsqzra7ldqEzCM-Pwp2w"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n  \"org_id\": \"{{TenantId}}\",\n  \"device_id\": \"{{deviceID}}\",\n  \"activity_type\": \"RANSOMWARE_DETECTION_LEVEL2\",\n  \"severity\": \"Critical\",\n  \"details\": {\n    \"threat_name\": \"WannaCry_LEVEL2\",\n    \"affected_files\": [\n      \"C:/Users/Documents/important.doc\",\n      \"C:/Users/Desktop/critical.xlsx\"\n    ],\n    \"detection_method\": \"BEHAVIOR_ANALYSIS\",\n    \"action_taken\": \"QUARANTINE\",\n    \"timestamp\": \"{{currentTimestamp}}\"\n  }\n},\n {\n  \"org_id\": \"{{TenantId}}\",\n  \"device_id\": \"{{deviceID}}\",\n  \"activity_type\": \"RANSOMWARE_DETECTION_LEVEL3\",\n  \"severity\": \"Medium\",\n  \"details\": {\n    \"threat_name\": \"WannaCry_LEVEL3\",\n    \"affected_files\": [\n      \"C:/Users/Documents/important.doc\",\n      \"C:/Users/Desktop/critical.xlsx\"\n    ],\n    \"detection_method\": \"BEHAVIOR_ANALYSIS\",\n    \"action_taken\": \"QUARANTINE\",\n    \"timestamp\": \"{{currentTimestamp}}\"\n  }\n}\n]\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a Activity log record against a invalid device id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Body should containg a string device not found\",function(){",
													"  pm.expect(pm.response.text()).to.include(\"Device not found with the given ID 9875436\");",
													"})"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "5dc270bf-85a5-4654-a0a6-c09654edf0c8"
											}
										}
									],
									"id": "df751a3f-a80d-4b94-9314-876c309a910a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1OElOME41S0syM3h3V2xxREk3T2hQVUVsYlViOWZIdFAxMTBpeU02NFg4In0.eyJleHAiOjE3MzAxOTgxNzEsImlhdCI6MTczMDE5Nzg3MSwianRpIjoiNzJkZjA0NzktZjAxOC00M2VkLTg5NWQtMmE0MjIyNDIwOTQzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL3JlYWxtcy9tZW1jcnlwdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5ZjI5YzYzNi1lZmMyLTRiMWUtYTMwMC0xNzBkZGY0MmU1YzEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZW1jcnlwdC1mcm9udGVuZCIsInNpZCI6IjZiNWU0ZmQ0LWQzNGUtNDY4Ny1iZTdlLWJlNWQ3Yjk1OWNiZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9vYXV0aC5wc3Rtbi5pbyIsImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMSJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1tZW1jcnlwdCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJPUkdfQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjJiNThjZWVjLTY5MzMtNGEyNC05ZTYwLWFlODIzMDk0MjUzZiIsIm5hbWUiOiJhcnVuIGt1bWFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSIsImdpdmVuX25hbWUiOiJhcnVuIiwiZmFtaWx5X25hbWUiOiJrdW1hciIsImVtYWlsIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSJ9.LKCbJvdYgqzO0KgXoBbq2CsPXrWr-JvvteF67ymWD57mda26e0QL5vI8W0p38pLJUKeqjcHhfIWdeFEc6c66O_zJxRE96_ij4-tJkJ1booGoUVfsC6wwRpNnGExyNvDBLjBUVEmv9xExkToO-WMhsOsbbofW8q-oP03wiWf80lcXrFgJm4il7hhDXF0EuS3wy1_NqjzaQ0jE7Y5kOEl5Ta4SogjSVeVXSRsLpG-pz8y3ppj5ZTXx5rt7GGRd1GyaSrLR5uSccVqqGr19zUQbRx9gUIYZCzsMTtUQEYOAju5MB4tSa87uRU4Yfa9KCG2pgTNsqzra7ldqEzCM-Pwp2w"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {   \n        \"device_id\": \"9875436\",   \n        \"activity_type\": \"RANSOMWARE_DETECTION\",   \n        \"severity\": \"High\",   \n        \"details\": {     \n            \"threat_name\": \"WannaCry\",     \n            \"affected_files\": [       \n                \"C:/Users/Documents/important.doc\",       \n                \"C:/Users/Desktop/critical.xlsx\"     \n            ],     \n            \"detection_method\": \"BEHAVIOR_ANALYSIS\",     \n            \"action_taken\": \"QUARANTINE\",     \n            \"timestamp\": \"{{currentTimestamp}}\"   \n        } \n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a Activity log record without sending deviceID data in the request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body matches string 'Validation error'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "88097cfd-154a-48f2-a043-f0533a55f1ca"
											}
										}
									],
									"id": "3a6b4b3a-2896-4b12-a12e-6f5fd6242aa0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1OElOME41S0syM3h3V2xxREk3T2hQVUVsYlViOWZIdFAxMTBpeU02NFg4In0.eyJleHAiOjE3MzAxOTgxNzEsImlhdCI6MTczMDE5Nzg3MSwianRpIjoiNzJkZjA0NzktZjAxOC00M2VkLTg5NWQtMmE0MjIyNDIwOTQzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL3JlYWxtcy9tZW1jcnlwdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5ZjI5YzYzNi1lZmMyLTRiMWUtYTMwMC0xNzBkZGY0MmU1YzEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZW1jcnlwdC1mcm9udGVuZCIsInNpZCI6IjZiNWU0ZmQ0LWQzNGUtNDY4Ny1iZTdlLWJlNWQ3Yjk1OWNiZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9vYXV0aC5wc3Rtbi5pbyIsImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMSJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1tZW1jcnlwdCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJPUkdfQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjJiNThjZWVjLTY5MzMtNGEyNC05ZTYwLWFlODIzMDk0MjUzZiIsIm5hbWUiOiJhcnVuIGt1bWFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSIsImdpdmVuX25hbWUiOiJhcnVuIiwiZmFtaWx5X25hbWUiOiJrdW1hciIsImVtYWlsIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSJ9.LKCbJvdYgqzO0KgXoBbq2CsPXrWr-JvvteF67ymWD57mda26e0QL5vI8W0p38pLJUKeqjcHhfIWdeFEc6c66O_zJxRE96_ij4-tJkJ1booGoUVfsC6wwRpNnGExyNvDBLjBUVEmv9xExkToO-WMhsOsbbofW8q-oP03wiWf80lcXrFgJm4il7hhDXF0EuS3wy1_NqjzaQ0jE7Y5kOEl5Ta4SogjSVeVXSRsLpG-pz8y3ppj5ZTXx5rt7GGRd1GyaSrLR5uSccVqqGr19zUQbRx9gUIYZCzsMTtUQEYOAju5MB4tSa87uRU4Yfa9KCG2pgTNsqzra7ldqEzCM-Pwp2w"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {   \n        \"device_id\": \"\",   \n        \"activity_type\": \"RANSOMWARE_DETECTION\",   \n        \"severity\": \"High\",   \n        \"details\": {     \n            \"threat_name\": \"WannaCry\",     \n            \"affected_files\": [       \n                \"C:/Users/Documents/important.doc\",       \n                \"C:/Users/Desktop/critical.xlsx\"     \n            ],     \n            \"detection_method\": \"BEHAVIOR_ANALYSIS\",     \n            \"action_taken\": \"QUARANTINE\",     \n            \"timestamp\": \"{{currentTimestamp}}\"   \n        } \n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating a Activity log record with missing parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the status code is 400 (or any expected status code)",
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"// Parse the response JSON",
													"const responseJson = pm.response.json();",
													"",
													"// Verify that the 'message' element in 'details' is as expected",
													"pm.test(\"Verify 'message' field in details array\", function () {",
													"    pm.expect(responseJson).to.have.property(\"details\"); // Ensure 'details' property exists",
													"    pm.expect(responseJson.details).to.be.an(\"array\").that.is.not.empty; // 'details' should be a non-empty array",
													"    pm.expect(responseJson.details[0]).to.have.property(\"message\", \"Field required\"); // Check 'message' field",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "92a3bc21-9227-4c19-9b04-194cc3ea837a"
											}
										}
									],
									"id": "c8f38917-5629-470e-add8-c7a67a7f5ffc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1OElOME41S0syM3h3V2xxREk3T2hQVUVsYlViOWZIdFAxMTBpeU02NFg4In0.eyJleHAiOjE3MzAxOTgxNzEsImlhdCI6MTczMDE5Nzg3MSwianRpIjoiNzJkZjA0NzktZjAxOC00M2VkLTg5NWQtMmE0MjIyNDIwOTQzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL3JlYWxtcy9tZW1jcnlwdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5ZjI5YzYzNi1lZmMyLTRiMWUtYTMwMC0xNzBkZGY0MmU1YzEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZW1jcnlwdC1mcm9udGVuZCIsInNpZCI6IjZiNWU0ZmQ0LWQzNGUtNDY4Ny1iZTdlLWJlNWQ3Yjk1OWNiZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9vYXV0aC5wc3Rtbi5pbyIsImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMSJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1tZW1jcnlwdCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJPUkdfQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjJiNThjZWVjLTY5MzMtNGEyNC05ZTYwLWFlODIzMDk0MjUzZiIsIm5hbWUiOiJhcnVuIGt1bWFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSIsImdpdmVuX25hbWUiOiJhcnVuIiwiZmFtaWx5X25hbWUiOiJrdW1hciIsImVtYWlsIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSJ9.LKCbJvdYgqzO0KgXoBbq2CsPXrWr-JvvteF67ymWD57mda26e0QL5vI8W0p38pLJUKeqjcHhfIWdeFEc6c66O_zJxRE96_ij4-tJkJ1booGoUVfsC6wwRpNnGExyNvDBLjBUVEmv9xExkToO-WMhsOsbbofW8q-oP03wiWf80lcXrFgJm4il7hhDXF0EuS3wy1_NqjzaQ0jE7Y5kOEl5Ta4SogjSVeVXSRsLpG-pz8y3ppj5ZTXx5rt7GGRd1GyaSrLR5uSccVqqGr19zUQbRx9gUIYZCzsMTtUQEYOAju5MB4tSa87uRU4Yfa9KCG2pgTNsqzra7ldqEzCM-Pwp2w"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {     \n        \"activity_type\": \"RANSOMWARE_DETECTION\",   \n        \"severity\": \"High\",   \n        \"details\": {     \n            \"threat_name\": \"WannaCry\",     \n            \"affected_files\": [       \n                \"C:/Users/Documents/important.doc\",       \n                \"C:/Users/Desktop/critical.xlsx\"     \n            ],     \n            \"detection_method\": \"BEHAVIOR_ANALYSIS\",     \n            \"action_taken\": \"QUARANTINE\",     \n            \"timestamp\": \"{{currentTimestamp}}\"   \n        } \n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs"
											]
										}
									},
									"response": []
								}
							],
							"id": "6b6aaeed-e9eb-48c4-bd7c-dd925d607769",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "66a0c41c-4f26-4ea2-8fd0-51878090f352"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "3e746aa2-77ac-4fff-b486-75c83437e5b0"
									}
								}
							]
						},
						{
							"name": "Fetching all Activity Logs",
							"item": [
								{
									"name": "Fetch all the activity logs in the org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a0be13ba-9638-4c17-9891-dcf1118ae38c"
											}
										}
									],
									"id": "f98f2016-de8c-4475-a8a0-40aeb471c288",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch the activity logs based on device id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "45c1eae8-953a-42fc-a985-60cdebb430a2"
											}
										}
									],
									"id": "2b0981c3-1f66-4015-9e96-3b780852315b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/activity-logs/device/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"activity-logs",
												"device",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "58ecf469-5d09-4ed2-8450-03055f4ea37a",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "0d44d072-4d8d-4e49-b5de-022b84f7c860"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "cd8d657b-abc3-4f2c-8b81-5f4c321822bd"
									}
								}
							]
						}
					],
					"id": "fd39e32b-8fc8-40c9-bcff-676a20d15f26",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "ab7e6cb2-d574-4ee0-a314-dc293bf0fb78"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "0d2edc6e-3549-4a8d-9c4f-4aa420d0bfac"
							}
						}
					]
				},
				{
					"name": "File Recovery",
					"item": [
						{
							"name": "Creating Recovery file records",
							"item": [
								{
									"name": "Create a file  recovery record against the device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1848fa4-ee94-4582-bcb8-afdcd1cd98e4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var responseRecoveryFileUniqueID = jsonData.id;",
													"pm.environment.set(\"recoveryFileUniqueID\", responseRecoveryFileUniqueID);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ac0b8e4b-9de3-4d1f-b01b-cb221ad4514c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n  \"device_id\": \"{{deviceID}}\",\n  \"file_name\": \"test.exe\",\n  \"status\": \"Pending\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 1024\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file_recovery"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify the status Validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ead236b-040f-4980-b71a-7eceea8ab333",
												"exec": [
													"// Check if the status code is 400 (or any expected status code)",
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"// Parse the response JSON",
													"const responseJson = pm.response.json();",
													"",
													"// Verify that the 'message' element in 'details' is as expected",
													"pm.test(\"Verify 'message' field in details array\", function () {",
													"    pm.expect(responseJson).to.have.property(\"details\"); // Ensure 'details' property exists",
													"    pm.expect(responseJson.details).to.be.an(\"array\").that.is.not.empty; // 'details' should be a non-empty array",
													"    pm.expect(responseJson.details[0]).to.have.property(\"message\", \"Input should be 'In Progress', 'Completed', 'Failed', 'Queued' or 'Pending'\"); // Check 'message' field",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8c67a6c1-0d3c-445f-a9bd-62db79d9fa1c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n  \"device_id\": \"{{deviceID}}\",\n  \"file_name\": \"test.exe\",\n  \"status\": \"Outstanding\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 1024\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file_recovery"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create multiple file recovery record against the device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15a0d7ce-94ac-432b-92e0-dcb77be983db",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e6715dd9-f36d-4ccf-89ab-dbd004dab15f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n  \"device_id\": \"{{deviceID}}\",\n  \"file_name\": \"test.exe\",\n  \"status\": \"Pending\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 1024\n},\n {\n  \"device_id\": \"{{deviceID}}\",\n  \"file_name\": \"error.exe\",\n  \"status\": \"Pending\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 2048\n}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file_recovery"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a file recovery record against the device passing invalid device id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9808aff-e907-4d9a-b379-07110ec7f204",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Body should contain a string device not found\",function(){",
													"  pm.expect(pm.response.text()).to.include(\"Device not found\");",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "69777734-b5a6-49a2-8286-7139a62de09a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n  \"device_id\": \"99987644\",\n  \"file_name\": \"test.exe\",\n  \"status\": \"Pending\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 1024\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file_recovery"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a file recovery record against the device passing null device id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00089851-7f94-4bbd-8dea-46c28becfa96",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body matches string 'Validation error'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"Validation error\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "378a423f-8bd3-498e-abdd-8a4eda64192f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n  \"device_id\": \"\",\n  \"file_name\": \"test.exe\",\n  \"status\": \"Pending\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 1024\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file_recovery"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a file recovery record against the device with missing parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2da3abf5-7e8b-4aaa-ae05-06787dbbfa08",
												"exec": [
													"// Check if the status code is 400 (or any expected status code)",
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"// Parse the response JSON",
													"const responseJson = pm.response.json();",
													"",
													"// Verify that the 'message' element in 'details' is as expected",
													"pm.test(\"Verify 'message' field in details array\", function () {",
													"    pm.expect(responseJson).to.have.property(\"details\"); // Ensure 'details' property exists",
													"    pm.expect(responseJson.details).to.be.an(\"array\").that.is.not.empty; // 'details' should be a non-empty array",
													"    pm.expect(responseJson.details[0]).to.have.property(\"message\", \"Field required\"); // Check 'message' field",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3eaeefa5-90b1-4804-9732-d41ca48d5711",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n  \"file_name\": \"test.exe\",\n  \"status\": \"Pending\",\n  \"recovery_method\": \"Shadow Copy\",\n  \"file_size\": 1024\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file_recovery"
											]
										}
									},
									"response": []
								}
							],
							"id": "c8ba94ac-6eb1-498c-bf3f-01bb3f49b873"
						},
						{
							"name": "Update Recovery File Record",
							"item": [
								{
									"name": "Update the recovery file record",
									"id": "cae814b6-1dc2-41a1-b6e4-3b6a2759fec9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"In Progress\",\n  \"recovery_method\": \"Shadow Copy\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/file-recovery/{{recoveryFileUniqueID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"file-recovery",
												"{{recoveryFileUniqueID}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a0477d30-072f-425d-b5d5-000441d75ed7"
						},
						{
							"name": "Fetch Recovery File Records",
							"item": [
								{
									"name": "Fetch all the recovery files in the organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "7d0fcc62-1d8d-4d11-a859-8ffaf7376295"
											}
										}
									],
									"id": "f3f3a055-3606-418f-81a3-31c8f9a9623a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/organization/devices/recoveries",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"organization",
												"devices",
												"recoveries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch all the recovery files based on device id in the organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "280257d3-4c21-4c77-bf75-a53661d30ef1"
											}
										}
									],
									"id": "047949a5-9a67-4780-b4ff-be9c852aa8b2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/device/{{deviceID}}/file_recovery",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"device",
												"{{deviceID}}",
												"file_recovery"
											]
										}
									},
									"response": []
								}
							],
							"id": "b0b88723-7f4b-4981-811b-1fc898dd801d"
						},
						{
							"name": "Delete User and Organization after recovery file",
							"item": [
								{
									"name": "Delete User After console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"  pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "5d2b256f-8970-4e15-8e74-e94808f7f4e8"
											}
										}
									],
									"id": "31cfa39a-d816-439e-b277-dd3b16239aa0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
											"host": [
												"{{keycloak_url}}"
											],
											"path": [
												"admin",
												"realms",
												"{{realm}}",
												"users",
												"{{AdminUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Org after console flow",
									"id": "853b9fb8-ba33-49a5-b51c-e9270b3dfbce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
											"host": [
												"{{keycloak_url}}"
											],
											"path": [
												"admin",
												"realms",
												"{{realm}}",
												"organizations",
												"{{TenantId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3b7b3009-4357-4bea-ab6e-2522c8164904",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Store the base URL from the environment variable",
											"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
											"let clientid = pm.environment.get(\"client_id\");",
											"",
											"// Set the base URL, realm, client ID, and client secret",
											" // Replace {keycloak_url} with your Keycloak URL",
											"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
											"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
											"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
											"",
											"// Set the token endpoint",
											"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
											"",
											"// Make the request to get the access token using client credentials",
											"pm.sendRequest({",
											"    url: tokenEndpoint,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/x-www-form-urlencoded'",
											"    },",
											"    body: {",
											"        mode: 'urlencoded',",
											"        urlencoded: [",
											"            { key: 'client_id', value: keycloakclientId },",
											"            { key: 'client_secret', value: keycloakclientSecret },",
											"            { key: 'grant_type', value: 'client_credentials' }",
											"        ]",
											"    }",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Failed to get access token:', err);",
											"    } else {",
											"        let jsonData = res.json();",
											"        ",
											"        if (jsonData.access_token) {",
											"            // Store the access token in an environment variable",
											"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
											"            console.log('Access token:', jsonData.access_token);",
											"        } else {",
											"            console.log('Error retrieving access token:', jsonData);",
											"        }",
											"    }",
											"});",
											""
										],
										"id": "8417dba7-5950-4d51-af83-3e392e9b8563"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "3896f72e-4ea6-437f-864a-e8a6f85a348e"
									}
								}
							]
						}
					],
					"id": "f0900cd9-81f2-420f-af9e-c30ce9b916fe",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "87cf7650-3b28-47c3-8207-b765883cf2ce"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								],
								"id": "07070811-b79f-4366-8a76-e68aefcbb1e9"
							}
						}
					]
				}
			],
			"id": "6d96b71f-74f4-4402-b9fd-fd88340aa5d7",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Store the base URL from the environment variable",
							"let keycloakurl = pm.environment.get(\"keycloak_url\");",
							"let clientid = pm.environment.get(\"client_id\");",
							"let realm = pm.environment.get(\"realm\");",
							"  // Replace {realm} with your realm",
							"",
							"let tokenEndpoint = `${keycloakurl}/realms/${realm}/protocol/openid-connect/token`;",
							"",
							"// Get the current time and the token expiration time from environment variables",
							"let currentTime = Math.floor(Date.now() / 1000);",
							"let tokenExpiration = pm.environment.get(\"user_token_expiration\");",
							"let userUserName = pm.environment.get(\"user_username\")",
							"let userPassword = pm.environment.get(\"user_password\")",
							"",
							"// Check if the token has expired or is about to expire",
							"if (currentTime >= tokenExpiration - 60) {",
							"    console.log(\"Access token is expired or about to expire for user, refreshing the token...\");",
							"",
							"    // Attempt to refresh the token",
							"    pm.sendRequest({",
							"        url: tokenEndpoint,",
							"        method: \"POST\",",
							"        header: {",
							"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"        },",
							"        body: {",
							"            mode: \"urlencoded\",",
							"            urlencoded: [",
							"                { key: \"client_id\", value: clientid },",
							"                { key: \"grant_type\", value: \"refresh_token\" },",
							"                { key: \"refresh_token\", value: pm.environment.get(\"user_refresh_token\") }",
							"            ]",
							"        }",
							"    }, function (err, res) {",
							"        if (err) {",
							"            console.log(\"Token refresh failed for user:\", err);",
							"        } else {",
							"            try {",
							"                let jsonData = res.json();",
							"",
							"                // Check if there is an invalid grant error",
							"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
							"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
							"               ",
							"                    // Handle the invalid grant error by re-authenticating",
							"                    pm.sendRequest({",
							"                        url: tokenEndpoint,",
							"                        method: \"POST\",",
							"                        header: {",
							"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"                        },",
							"                        body: {",
							"                            mode: \"urlencoded\",",
							"                            urlencoded: [",
							"                                { key: \"client_id\", value: clientid },",
							"                                { key: \"grant_type\", value: \"password\" },",
							"                                { key: \"username\", value: userUserName }, // Store securely in environment",
							"                                { key: \"password\", value: userPassword }, // Store securely in environment",
							"                                { key: \"scope\", value: \"openid\" }",
							"                            ]",
							"                        }",
							"                    }, function (authErr, authRes) {",
							"                        if (authErr) {",
							"                            console.log(\"Re-authentication failed for user:\", authErr);",
							"                        } else {",
							"                            let authData = authRes.json();",
							"",
							"                            // Update the access token, refresh token, and expiration time",
							"                            pm.environment.set(\"user_access_token\", authData.access_token);",
							"                            pm.environment.set(\"user_refresh_token\", authData.refresh_token);",
							"",
							"                            // Calculate and store the new token expiration time",
							"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
							"                            pm.environment.set(\"user_token_expiration\", newExpirationTime);",
							"",
							"                            console.log(\"Re-authentication successful, new token acquired for user.\");",
							"                        }",
							"                    });",
							"                } else {",
							"                    // Update the access token, refresh token, and expiration time",
							"                    pm.environment.set(\"user_access_token\", jsonData.access_token);",
							"                    pm.environment.set(\"user_refresh_token\", jsonData.refresh_token);",
							"",
							"                    // Calculate and store the new token expiration time",
							"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
							"                    pm.environment.set(\"user_token_expiration\", newExpirationTime);",
							"",
							"                    console.log(\"User Token refreshed successfully.\");",
							"                }",
							"            } catch (e) {",
							"                console.log(\"Error parsing response for user:\", e);",
							"            }",
							"        }",
							"    });",
							"} else {",
							"    console.log(\"Access token is still valid for user, no need to refresh.\");",
							"}",
							""
						],
						"id": "d626aa20-8002-4803-80e5-9db3126695b9"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						],
						"id": "ad71d7e9-5d49-419d-acca-4ea81b80cc57"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "145800a0-5cdb-4532-93d6-b0dbaa33b4e0"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "42f6f71f-66ae-4a10-8e99-9ba781a3c38b"
			}
		}
	]
}